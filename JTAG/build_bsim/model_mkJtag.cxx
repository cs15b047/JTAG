/*
 * Generated by Bluespec Compiler, version 2017.03.beta1 (build 35049, 2017-03-16)
 * 
 * On Sun Jun 18 11:21:19 IST 2017
 * 
 */
#include "bluesim_primitives.h"
#include "model_mkJtag.h"

#include <cstdlib>
#include <time.h>
#include "bluesim_kernel_api.h"
#include "bs_vcd.h"
#include "bs_reset.h"


/* Constructor */
MODEL_mkJtag::MODEL_mkJtag()
{
  mkJtag_instance = NULL;
}

/* Function for creating a new model */
void * new_MODEL_mkJtag()
{
  MODEL_mkJtag *model = new MODEL_mkJtag();
  return (void *)(model);
}

/* Schedule functions */

static void schedule_posedge_CLK(tSimStateHdl simHdl, void *instance_ptr)
       {
	 MOD_mkJtag &INST_top = *((MOD_mkJtag *)(instance_ptr));
	 INST_top.DEF_CAN_FIRE_RL_rl_assign_op = (tUInt8)1u;
	 INST_top.DEF_WILL_FIRE_RL_rl_assign_op = INST_top.DEF_CAN_FIRE_RL_rl_assign_op;
	 INST_top.DEF_CAN_FIRE_RL_rl_bypass = (tUInt8)1u;
	 INST_top.DEF_WILL_FIRE_RL_rl_bypass = INST_top.DEF_CAN_FIRE_RL_rl_bypass;
	 INST_top.DEF_CAN_FIRE_RL_rl_instruction = (tUInt8)1u;
	 INST_top.DEF_WILL_FIRE_RL_rl_instruction = INST_top.DEF_CAN_FIRE_RL_rl_instruction;
	 INST_top.DEF_CAN_FIRE_RL_rl_latch_ir = (tUInt8)1u;
	 INST_top.DEF_WILL_FIRE_RL_rl_latch_ir = INST_top.DEF_CAN_FIRE_RL_rl_latch_ir;
	 INST_top.DEF_CAN_FIRE_RL_rl_print_state = (tUInt8)1u;
	 INST_top.DEF_WILL_FIRE_RL_rl_print_state = INST_top.DEF_CAN_FIRE_RL_rl_print_state;
	 INST_top.DEF_CAN_FIRE_RL_rl_process_instr = (tUInt8)1u;
	 INST_top.DEF_WILL_FIRE_RL_rl_process_instr = INST_top.DEF_CAN_FIRE_RL_rl_process_instr;
	 INST_top.DEF_test_logic_reset__h3484 = INST_top.INST_test_logic_reset.METH_read();
	 INST_top.DEF_CAN_FIRE_RL_rl_state_1 = INST_top.DEF_test_logic_reset__h3484;
	 INST_top.DEF_WILL_FIRE_RL_rl_state_1 = INST_top.DEF_CAN_FIRE_RL_rl_state_1;
	 INST_top.DEF_exit1_ir___d12 = INST_top.INST_exit1_ir.METH_read();
	 INST_top.DEF_CAN_FIRE_RL_rl_state_10 = INST_top.DEF_exit1_ir___d12;
	 INST_top.DEF_WILL_FIRE_RL_rl_state_10 = INST_top.DEF_CAN_FIRE_RL_rl_state_10;
	 INST_top.DEF_pause_dr___d13 = INST_top.INST_pause_dr.METH_read();
	 INST_top.DEF_CAN_FIRE_RL_rl_state_11 = INST_top.DEF_pause_dr___d13;
	 INST_top.DEF_WILL_FIRE_RL_rl_state_11 = INST_top.DEF_CAN_FIRE_RL_rl_state_11;
	 INST_top.DEF_pause_ir___d14 = INST_top.INST_pause_ir.METH_read();
	 INST_top.DEF_CAN_FIRE_RL_rl_state_12 = INST_top.DEF_pause_ir___d14;
	 INST_top.DEF_WILL_FIRE_RL_rl_state_12 = INST_top.DEF_CAN_FIRE_RL_rl_state_12;
	 INST_top.DEF_exit2_ir___d15 = INST_top.INST_exit2_ir.METH_read();
	 INST_top.DEF_CAN_FIRE_RL_rl_state_13 = INST_top.DEF_exit2_ir___d15;
	 INST_top.DEF_WILL_FIRE_RL_rl_state_13 = INST_top.DEF_CAN_FIRE_RL_rl_state_13;
	 INST_top.DEF_update_dr___d17 = INST_top.INST_update_dr.METH_read();
	 INST_top.DEF_CAN_FIRE_RL_rl_state_15 = INST_top.DEF_update_dr___d17;
	 INST_top.DEF_WILL_FIRE_RL_rl_state_15 = INST_top.DEF_CAN_FIRE_RL_rl_state_15;
	 INST_top.DEF_exit2_dr___d16 = INST_top.INST_exit2_dr.METH_read();
	 INST_top.DEF_CAN_FIRE_RL_rl_state_14 = INST_top.DEF_exit2_dr___d16;
	 INST_top.DEF_WILL_FIRE_RL_rl_state_14 = INST_top.DEF_CAN_FIRE_RL_rl_state_14;
	 INST_top.DEF_update_ir__h3482 = INST_top.INST_update_ir.METH_read();
	 INST_top.DEF_CAN_FIRE_RL_rl_state_16 = INST_top.DEF_update_ir__h3482;
	 INST_top.DEF_WILL_FIRE_RL_rl_state_16 = INST_top.DEF_CAN_FIRE_RL_rl_state_16;
	 INST_top.DEF_run_test_idle___d4 = INST_top.INST_run_test_idle.METH_read();
	 INST_top.DEF_CAN_FIRE_RL_rl_state_2 = INST_top.DEF_run_test_idle___d4;
	 INST_top.DEF_WILL_FIRE_RL_rl_state_2 = INST_top.DEF_CAN_FIRE_RL_rl_state_2;
	 INST_top.DEF_select_dr_scan___d5 = INST_top.INST_select_dr_scan.METH_read();
	 INST_top.DEF_CAN_FIRE_RL_rl_state_3 = INST_top.DEF_select_dr_scan___d5;
	 INST_top.DEF_WILL_FIRE_RL_rl_state_3 = INST_top.DEF_CAN_FIRE_RL_rl_state_3;
	 INST_top.DEF_select_ir_scan___d6 = INST_top.INST_select_ir_scan.METH_read();
	 INST_top.DEF_CAN_FIRE_RL_rl_state_4 = INST_top.DEF_select_ir_scan___d6;
	 INST_top.DEF_WILL_FIRE_RL_rl_state_4 = INST_top.DEF_CAN_FIRE_RL_rl_state_4;
	 INST_top.DEF_capture_dr___d7 = INST_top.INST_capture_dr.METH_read();
	 INST_top.DEF_CAN_FIRE_RL_rl_state_5 = INST_top.DEF_capture_dr___d7;
	 INST_top.DEF_WILL_FIRE_RL_rl_state_5 = INST_top.DEF_CAN_FIRE_RL_rl_state_5;
	 INST_top.DEF_capture_ir__h3447 = INST_top.INST_capture_ir.METH_read();
	 INST_top.DEF_CAN_FIRE_RL_rl_state_6 = INST_top.DEF_capture_ir__h3447;
	 INST_top.DEF_WILL_FIRE_RL_rl_state_6 = INST_top.DEF_CAN_FIRE_RL_rl_state_6;
	 INST_top.DEF_shift_dr__h3465 = INST_top.INST_shift_dr.METH_read();
	 INST_top.DEF_CAN_FIRE_RL_rl_state_7 = INST_top.DEF_shift_dr__h3465;
	 INST_top.DEF_WILL_FIRE_RL_rl_state_7 = INST_top.DEF_CAN_FIRE_RL_rl_state_7;
	 INST_top.DEF_shift_ir__h3372 = INST_top.INST_shift_ir.METH_read();
	 INST_top.DEF_CAN_FIRE_RL_rl_state_8 = INST_top.DEF_shift_ir__h3372;
	 INST_top.DEF_WILL_FIRE_RL_rl_state_8 = INST_top.DEF_CAN_FIRE_RL_rl_state_8;
	 INST_top.DEF_exit1_dr___d11 = INST_top.INST_exit1_dr.METH_read();
	 INST_top.DEF_CAN_FIRE_RL_rl_state_9 = INST_top.DEF_exit1_dr___d11;
	 INST_top.DEF_WILL_FIRE_RL_rl_state_9 = INST_top.DEF_CAN_FIRE_RL_rl_state_9;
	 INST_top.DEF_i__h3513 = INST_top.INST_count.METH_read();
	 INST_top.DEF_CAN_FIRE_RL_rl_tp = (INST_top.DEF_i__h3513) < (tUInt8)13u;
	 INST_top.DEF_WILL_FIRE_RL_rl_tp = INST_top.DEF_CAN_FIRE_RL_rl_tp;
	 INST_top.DEF_CAN_FIRE___me_check_0 = (tUInt8)1u;
	 INST_top.DEF_WILL_FIRE___me_check_0 = INST_top.DEF_CAN_FIRE___me_check_0;
	 INST_top.DEF_CAN_FIRE___me_check_1 = (tUInt8)1u;
	 INST_top.DEF_WILL_FIRE___me_check_1 = INST_top.DEF_CAN_FIRE___me_check_1;
	 INST_top.DEF_CAN_FIRE___me_check_10 = (tUInt8)1u;
	 INST_top.DEF_WILL_FIRE___me_check_10 = INST_top.DEF_CAN_FIRE___me_check_10;
	 INST_top.DEF_CAN_FIRE___me_check_11 = (tUInt8)1u;
	 INST_top.DEF_WILL_FIRE___me_check_11 = INST_top.DEF_CAN_FIRE___me_check_11;
	 INST_top.DEF_CAN_FIRE___me_check_12 = (tUInt8)1u;
	 INST_top.DEF_WILL_FIRE___me_check_12 = INST_top.DEF_CAN_FIRE___me_check_12;
	 INST_top.DEF_CAN_FIRE___me_check_13 = (tUInt8)1u;
	 INST_top.DEF_WILL_FIRE___me_check_13 = INST_top.DEF_CAN_FIRE___me_check_13;
	 INST_top.DEF_CAN_FIRE___me_check_14 = (tUInt8)1u;
	 INST_top.DEF_WILL_FIRE___me_check_14 = INST_top.DEF_CAN_FIRE___me_check_14;
	 INST_top.DEF_CAN_FIRE___me_check_3 = (tUInt8)1u;
	 INST_top.DEF_WILL_FIRE___me_check_3 = INST_top.DEF_CAN_FIRE___me_check_3;
	 INST_top.DEF_CAN_FIRE___me_check_2 = (tUInt8)1u;
	 INST_top.DEF_WILL_FIRE___me_check_2 = INST_top.DEF_CAN_FIRE___me_check_2;
	 INST_top.DEF_CAN_FIRE___me_check_4 = (tUInt8)1u;
	 INST_top.DEF_WILL_FIRE___me_check_4 = INST_top.DEF_CAN_FIRE___me_check_4;
	 INST_top.DEF_CAN_FIRE___me_check_5 = (tUInt8)1u;
	 INST_top.DEF_WILL_FIRE___me_check_5 = INST_top.DEF_CAN_FIRE___me_check_5;
	 INST_top.DEF_CAN_FIRE___me_check_6 = (tUInt8)1u;
	 INST_top.DEF_WILL_FIRE___me_check_6 = INST_top.DEF_CAN_FIRE___me_check_6;
	 INST_top.DEF_CAN_FIRE___me_check_7 = (tUInt8)1u;
	 INST_top.DEF_WILL_FIRE___me_check_7 = INST_top.DEF_CAN_FIRE___me_check_7;
	 INST_top.DEF_CAN_FIRE___me_check_8 = (tUInt8)1u;
	 INST_top.DEF_WILL_FIRE___me_check_8 = INST_top.DEF_CAN_FIRE___me_check_8;
	 INST_top.DEF_CAN_FIRE___me_check_9 = (tUInt8)1u;
	 INST_top.DEF_WILL_FIRE___me_check_9 = INST_top.DEF_CAN_FIRE___me_check_9;
	 if (INST_top.DEF_WILL_FIRE_RL_rl_assign_op)
	   INST_top.RL_rl_assign_op();
	 if (INST_top.DEF_WILL_FIRE_RL_rl_print_state)
	   INST_top.RL_rl_print_state();
	 if (INST_top.DEF_WILL_FIRE_RL_rl_bypass)
	   INST_top.RL_rl_bypass();
	 if (INST_top.DEF_WILL_FIRE_RL_rl_process_instr)
	   INST_top.RL_rl_process_instr();
	 if (INST_top.DEF_WILL_FIRE_RL_rl_latch_ir)
	   INST_top.RL_rl_latch_ir();
	 if (INST_top.DEF_WILL_FIRE_RL_rl_state_1)
	   INST_top.RL_rl_state_1();
	 if (INST_top.DEF_WILL_FIRE_RL_rl_state_10)
	   INST_top.RL_rl_state_10();
	 if (INST_top.DEF_WILL_FIRE_RL_rl_state_11)
	   INST_top.RL_rl_state_11();
	 if (INST_top.DEF_WILL_FIRE_RL_rl_state_12)
	   INST_top.RL_rl_state_12();
	 if (INST_top.DEF_WILL_FIRE_RL_rl_state_14)
	   INST_top.RL_rl_state_14();
	 if (INST_top.DEF_WILL_FIRE_RL_rl_state_15)
	   INST_top.RL_rl_state_15();
	 if (INST_top.DEF_WILL_FIRE_RL_rl_state_16)
	   INST_top.RL_rl_state_16();
	 if (INST_top.DEF_WILL_FIRE_RL_rl_state_2)
	   INST_top.RL_rl_state_2();
	 if (INST_top.DEF_WILL_FIRE_RL_rl_state_3)
	   INST_top.RL_rl_state_3();
	 if (INST_top.DEF_WILL_FIRE_RL_rl_state_5)
	   INST_top.RL_rl_state_5();
	 if (INST_top.DEF_WILL_FIRE_RL_rl_state_7)
	   INST_top.RL_rl_state_7();
	 if (INST_top.DEF_WILL_FIRE_RL_rl_state_9)
	   INST_top.RL_rl_state_9();
	 if (INST_top.DEF_WILL_FIRE___me_check_13)
	   INST_top.__me_check_13();
	 if (INST_top.DEF_WILL_FIRE___me_check_14)
	   INST_top.__me_check_14();
	 if (INST_top.DEF_WILL_FIRE_RL_rl_instruction)
	   INST_top.RL_rl_instruction();
	 if (INST_top.DEF_WILL_FIRE_RL_rl_state_13)
	   INST_top.RL_rl_state_13();
	 if (INST_top.DEF_WILL_FIRE_RL_rl_state_4)
	   INST_top.RL_rl_state_4();
	 if (INST_top.DEF_WILL_FIRE_RL_rl_state_6)
	   INST_top.RL_rl_state_6();
	 if (INST_top.DEF_WILL_FIRE_RL_rl_state_8)
	   INST_top.RL_rl_state_8();
	 if (INST_top.DEF_WILL_FIRE___me_check_0)
	   INST_top.__me_check_0();
	 if (INST_top.DEF_WILL_FIRE___me_check_1)
	   INST_top.__me_check_1();
	 if (INST_top.DEF_WILL_FIRE___me_check_2)
	   INST_top.__me_check_2();
	 if (INST_top.DEF_WILL_FIRE___me_check_3)
	   INST_top.__me_check_3();
	 if (INST_top.DEF_WILL_FIRE___me_check_4)
	   INST_top.__me_check_4();
	 if (INST_top.DEF_WILL_FIRE___me_check_5)
	   INST_top.__me_check_5();
	 if (INST_top.DEF_WILL_FIRE___me_check_6)
	   INST_top.__me_check_6();
	 if (INST_top.DEF_WILL_FIRE___me_check_7)
	   INST_top.__me_check_7();
	 if (INST_top.DEF_WILL_FIRE___me_check_8)
	   INST_top.__me_check_8();
	 if (INST_top.DEF_WILL_FIRE___me_check_9)
	   INST_top.__me_check_9();
	 if (INST_top.DEF_WILL_FIRE___me_check_10)
	   INST_top.__me_check_10();
	 if (INST_top.DEF_WILL_FIRE___me_check_11)
	   INST_top.__me_check_11();
	 if (INST_top.DEF_WILL_FIRE___me_check_12)
	   INST_top.__me_check_12();
	 if (INST_top.DEF_WILL_FIRE_RL_rl_tp)
	   INST_top.RL_rl_tp();
	 INST_top.INST_inverted.clk((tUInt8)1u, (tUInt8)1u);
	 if (do_reset_ticks(simHdl))
	 {
	   INST_top.INST_tms.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_count.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_tms_vec.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_tdi.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_test_logic_reset.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_run_test_idle.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_select_dr_scan.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_select_ir_scan.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_capture_dr.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_capture_ir.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_shift_dr.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_shift_ir.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_exit1_dr.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_exit1_ir.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_pause_dr.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_pause_ir.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_exit2_dr.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_exit2_ir.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_update_dr.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_update_ir.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_bypass_tdo.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_idcode_select.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_extest_select.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_debug_select.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_sample_preload_select.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_bypass_select.rst_tick__clk__1((tUInt8)1u);
	 }
       };
static void schedule_posedge_inverted$CLK_OUT(tSimStateHdl simHdl, void *instance_ptr)
       {
	 MOD_mkJtag &INST_top = *((MOD_mkJtag *)(instance_ptr));
	 if (do_reset_ticks(simHdl))
	 {
	 }
       };
static void schedule_negedge_CLK(tSimStateHdl simHdl, void *instance_ptr)
       {
	 MOD_mkJtag &INST_top = *((MOD_mkJtag *)(instance_ptr));
	 INST_top.INST_inverted.clk((tUInt8)0u, (tUInt8)1u);
       };

/* Model creation/destruction functions */

void MODEL_mkJtag::create_model(tSimStateHdl simHdl, bool master)
{
  sim_hdl = simHdl;
  init_reset_request_counters(sim_hdl);
  mkJtag_instance = new MOD_mkJtag(sim_hdl, "top", NULL);
  bk_get_or_define_clock(sim_hdl, "CLK");
  bk_get_or_define_clock(sim_hdl, "inverted$CLK_OUT");
  if (master)
  {
    bk_alter_clock(sim_hdl, bk_get_clock_by_name(sim_hdl, "CLK"), CLK_LOW, false, 0llu, 5llu, 5llu);
    bk_use_default_reset(sim_hdl);
  }
  bk_set_clock_event_fn(sim_hdl,
			bk_get_clock_by_name(sim_hdl, "CLK"),
			schedule_posedge_CLK,
			NULL,
			(tEdgeDirection)(POSEDGE));
  bk_set_clock_event_fn(sim_hdl,
			bk_get_clock_by_name(sim_hdl, "inverted$CLK_OUT"),
			schedule_posedge_inverted$CLK_OUT,
			NULL,
			(tEdgeDirection)(POSEDGE));
  bk_set_clock_event_fn(sim_hdl,
			bk_get_clock_by_name(sim_hdl, "CLK"),
			schedule_negedge_CLK,
			NULL,
			(tEdgeDirection)(NEGEDGE));
  (mkJtag_instance->set_clk_0)("CLK");
  (mkJtag_instance->INST_inverted.set_clk_0)("inverted$CLK_OUT");
  (mkJtag_instance->set_clk_1)("inverted$CLK_OUT");
}
void MODEL_mkJtag::destroy_model()
{
  delete mkJtag_instance;
  mkJtag_instance = NULL;
}
void MODEL_mkJtag::reset_model(bool asserted)
{
  (mkJtag_instance->reset_RST_N)(asserted ? (tUInt8)0u : (tUInt8)1u);
}
void * MODEL_mkJtag::get_instance()
{
  return mkJtag_instance;
}

/* Fill in version numbers */
void MODEL_mkJtag::get_version(unsigned int *year,
			       unsigned int *month,
			       char const **annotation,
			       char const **build)
{
  *year = 2017u;
  *month = 3u;
  *annotation = "beta1";
  *build = "35049";
}

/* Get the model creation time */
time_t MODEL_mkJtag::get_creation_time()
{
  
  /* Sun Jun 18 05:51:19 UTC 2017 */
  return 1497765079llu;
}

/* Control run-time licensing */
tUInt64 MODEL_mkJtag::skip_license_check()
{
  return 0llu;
}

/* State dumping function */
void MODEL_mkJtag::dump_state()
{
  (mkJtag_instance->dump_state)(0u);
}

/* VCD dumping functions */
MOD_mkJtag & mkJtag_backing(tSimStateHdl simHdl)
{
  static MOD_mkJtag *instance = NULL;
  if (instance == NULL)
  {
    vcd_set_backing_instance(simHdl, true);
    instance = new MOD_mkJtag(simHdl, "top", NULL);
    vcd_set_backing_instance(simHdl, false);
  }
  return *instance;
}
void MODEL_mkJtag::dump_VCD_defs()
{
  (mkJtag_instance->dump_VCD_defs)(vcd_depth(sim_hdl));
}
void MODEL_mkJtag::dump_VCD(tVCDDumpType dt)
{
  (mkJtag_instance->dump_VCD)(dt, vcd_depth(sim_hdl), mkJtag_backing(sim_hdl));
}

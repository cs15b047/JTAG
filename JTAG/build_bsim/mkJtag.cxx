/*
 * Generated by Bluespec Compiler, version 2017.03.beta1 (build 35049, 2017-03-16)
 * 
 * On Sun Jun 18 11:21:19 IST 2017
 * 
 */
#include "bluesim_primitives.h"
#include "mkJtag.h"


/* String declarations */
static std::string const __str_literal_2("%d %d", 5u);
static std::string const __str_literal_1("%d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d", 47u);
static std::string const __str_literal_93("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 103: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_8] and\n  [RL_rl_state_10] ) fired in the same clock cycle.\n",
					  181u);
static std::string const __str_literal_92("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 103: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_8] and\n  [RL_rl_state_11] ) fired in the same clock cycle.\n",
					  181u);
static std::string const __str_literal_91("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 103: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_8] and\n  [RL_rl_state_12] ) fired in the same clock cycle.\n",
					  181u);
static std::string const __str_literal_90("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 103: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_8] and\n  [RL_rl_state_13] ) fired in the same clock cycle.\n",
					  181u);
static std::string const __str_literal_89("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 103: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_8] and\n  [RL_rl_state_14] ) fired in the same clock cycle.\n",
					  181u);
static std::string const __str_literal_88("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 103: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_8] and\n  [RL_rl_state_15] ) fired in the same clock cycle.\n",
					  181u);
static std::string const __str_literal_87("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 103: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_8] and\n  [RL_rl_state_16] ) fired in the same clock cycle.\n",
					  181u);
static std::string const __str_literal_94("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 103: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_8] and\n  [RL_rl_state_9] ) fired in the same clock cycle.\n",
					  180u);
static std::string const __str_literal_101("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 114: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_9] and\n  [RL_rl_state_10] ) fired in the same clock cycle.\n",
					   181u);
static std::string const __str_literal_100("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 114: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_9] and\n  [RL_rl_state_11] ) fired in the same clock cycle.\n",
					   181u);
static std::string const __str_literal_99("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 114: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_9] and\n  [RL_rl_state_12] ) fired in the same clock cycle.\n",
					  181u);
static std::string const __str_literal_98("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 114: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_9] and\n  [RL_rl_state_13] ) fired in the same clock cycle.\n",
					  181u);
static std::string const __str_literal_97("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 114: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_9] and\n  [RL_rl_state_14] ) fired in the same clock cycle.\n",
					  181u);
static std::string const __str_literal_96("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 114: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_9] and\n  [RL_rl_state_15] ) fired in the same clock cycle.\n",
					  181u);
static std::string const __str_literal_95("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 114: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_9] and\n  [RL_rl_state_16] ) fired in the same clock cycle.\n",
					  181u);
static std::string const __str_literal_107("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 125: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_10] and\n  [RL_rl_state_11] ) fired in the same clock cycle.\n",
					   182u);
static std::string const __str_literal_106("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 125: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_10] and\n  [RL_rl_state_12] ) fired in the same clock cycle.\n",
					   182u);
static std::string const __str_literal_105("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 125: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_10] and\n  [RL_rl_state_13] ) fired in the same clock cycle.\n",
					   182u);
static std::string const __str_literal_104("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 125: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_10] and\n  [RL_rl_state_14] ) fired in the same clock cycle.\n",
					   182u);
static std::string const __str_literal_103("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 125: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_10] and\n  [RL_rl_state_15] ) fired in the same clock cycle.\n",
					   182u);
static std::string const __str_literal_102("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 125: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_10] and\n  [RL_rl_state_16] ) fired in the same clock cycle.\n",
					   182u);
static std::string const __str_literal_112("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 137: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_11] and\n  [RL_rl_state_12] ) fired in the same clock cycle.\n",
					   182u);
static std::string const __str_literal_111("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 137: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_11] and\n  [RL_rl_state_13] ) fired in the same clock cycle.\n",
					   182u);
static std::string const __str_literal_110("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 137: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_11] and\n  [RL_rl_state_14] ) fired in the same clock cycle.\n",
					   182u);
static std::string const __str_literal_109("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 137: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_11] and\n  [RL_rl_state_15] ) fired in the same clock cycle.\n",
					   182u);
static std::string const __str_literal_108("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 137: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_11] and\n  [RL_rl_state_16] ) fired in the same clock cycle.\n",
					   182u);
static std::string const __str_literal_116("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 149: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_12] and\n  [RL_rl_state_13] ) fired in the same clock cycle.\n",
					   182u);
static std::string const __str_literal_115("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 149: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_12] and\n  [RL_rl_state_14] ) fired in the same clock cycle.\n",
					   182u);
static std::string const __str_literal_114("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 149: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_12] and\n  [RL_rl_state_15] ) fired in the same clock cycle.\n",
					   182u);
static std::string const __str_literal_113("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 149: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_12] and\n  [RL_rl_state_16] ) fired in the same clock cycle.\n",
					   182u);
static std::string const __str_literal_119("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 161: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_13] and\n  [RL_rl_state_14] ) fired in the same clock cycle.\n",
					   182u);
static std::string const __str_literal_118("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 161: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_13] and\n  [RL_rl_state_15] ) fired in the same clock cycle.\n",
					   182u);
static std::string const __str_literal_117("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 161: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_13] and\n  [RL_rl_state_16] ) fired in the same clock cycle.\n",
					   182u);
static std::string const __str_literal_121("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 173: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_14] and\n  [RL_rl_state_15] ) fired in the same clock cycle.\n",
					   182u);
static std::string const __str_literal_120("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 173: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_14] and\n  [RL_rl_state_16] ) fired in the same clock cycle.\n",
					   182u);
static std::string const __str_literal_122("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 185: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_15] and\n  [RL_rl_state_16] ) fired in the same clock cycle.\n",
					   182u);
static std::string const __str_literal_9("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 26: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_1] and\n  [RL_rl_state_10] ) fired in the same clock cycle.\n",
					 180u);
static std::string const __str_literal_8("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 26: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_1] and\n  [RL_rl_state_11] ) fired in the same clock cycle.\n",
					 180u);
static std::string const __str_literal_7("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 26: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_1] and\n  [RL_rl_state_12] ) fired in the same clock cycle.\n",
					 180u);
static std::string const __str_literal_6("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 26: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_1] and\n  [RL_rl_state_13] ) fired in the same clock cycle.\n",
					 180u);
static std::string const __str_literal_5("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 26: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_1] and\n  [RL_rl_state_14] ) fired in the same clock cycle.\n",
					 180u);
static std::string const __str_literal_4("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 26: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_1] and\n  [RL_rl_state_15] ) fired in the same clock cycle.\n",
					 180u);
static std::string const __str_literal_3("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 26: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_1] and\n  [RL_rl_state_16] ) fired in the same clock cycle.\n",
					 180u);
static std::string const __str_literal_17("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 26: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_1] and\n  [RL_rl_state_2] ) fired in the same clock cycle.\n",
					  179u);
static std::string const __str_literal_16("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 26: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_1] and\n  [RL_rl_state_3] ) fired in the same clock cycle.\n",
					  179u);
static std::string const __str_literal_15("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 26: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_1] and\n  [RL_rl_state_4] ) fired in the same clock cycle.\n",
					  179u);
static std::string const __str_literal_14("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 26: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_1] and\n  [RL_rl_state_5] ) fired in the same clock cycle.\n",
					  179u);
static std::string const __str_literal_13("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 26: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_1] and\n  [RL_rl_state_6] ) fired in the same clock cycle.\n",
					  179u);
static std::string const __str_literal_12("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 26: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_1] and\n  [RL_rl_state_7] ) fired in the same clock cycle.\n",
					  179u);
static std::string const __str_literal_11("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 26: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_1] and\n  [RL_rl_state_8] ) fired in the same clock cycle.\n",
					  179u);
static std::string const __str_literal_10("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 26: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_1] and\n  [RL_rl_state_9] ) fired in the same clock cycle.\n",
					  179u);
static std::string const __str_literal_24("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 37: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_2] and\n  [RL_rl_state_10] ) fired in the same clock cycle.\n",
					  180u);
static std::string const __str_literal_23("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 37: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_2] and\n  [RL_rl_state_11] ) fired in the same clock cycle.\n",
					  180u);
static std::string const __str_literal_22("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 37: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_2] and\n  [RL_rl_state_12] ) fired in the same clock cycle.\n",
					  180u);
static std::string const __str_literal_21("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 37: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_2] and\n  [RL_rl_state_13] ) fired in the same clock cycle.\n",
					  180u);
static std::string const __str_literal_20("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 37: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_2] and\n  [RL_rl_state_14] ) fired in the same clock cycle.\n",
					  180u);
static std::string const __str_literal_19("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 37: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_2] and\n  [RL_rl_state_15] ) fired in the same clock cycle.\n",
					  180u);
static std::string const __str_literal_18("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 37: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_2] and\n  [RL_rl_state_16] ) fired in the same clock cycle.\n",
					  180u);
static std::string const __str_literal_31("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 37: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_2] and\n  [RL_rl_state_3] ) fired in the same clock cycle.\n",
					  179u);
static std::string const __str_literal_30("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 37: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_2] and\n  [RL_rl_state_4] ) fired in the same clock cycle.\n",
					  179u);
static std::string const __str_literal_29("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 37: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_2] and\n  [RL_rl_state_5] ) fired in the same clock cycle.\n",
					  179u);
static std::string const __str_literal_28("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 37: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_2] and\n  [RL_rl_state_6] ) fired in the same clock cycle.\n",
					  179u);
static std::string const __str_literal_27("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 37: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_2] and\n  [RL_rl_state_7] ) fired in the same clock cycle.\n",
					  179u);
static std::string const __str_literal_26("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 37: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_2] and\n  [RL_rl_state_8] ) fired in the same clock cycle.\n",
					  179u);
static std::string const __str_literal_25("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 37: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_2] and\n  [RL_rl_state_9] ) fired in the same clock cycle.\n",
					  179u);
static std::string const __str_literal_38("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 48: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_3] and\n  [RL_rl_state_10] ) fired in the same clock cycle.\n",
					  180u);
static std::string const __str_literal_37("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 48: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_3] and\n  [RL_rl_state_11] ) fired in the same clock cycle.\n",
					  180u);
static std::string const __str_literal_36("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 48: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_3] and\n  [RL_rl_state_12] ) fired in the same clock cycle.\n",
					  180u);
static std::string const __str_literal_35("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 48: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_3] and\n  [RL_rl_state_13] ) fired in the same clock cycle.\n",
					  180u);
static std::string const __str_literal_34("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 48: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_3] and\n  [RL_rl_state_14] ) fired in the same clock cycle.\n",
					  180u);
static std::string const __str_literal_33("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 48: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_3] and\n  [RL_rl_state_15] ) fired in the same clock cycle.\n",
					  180u);
static std::string const __str_literal_32("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 48: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_3] and\n  [RL_rl_state_16] ) fired in the same clock cycle.\n",
					  180u);
static std::string const __str_literal_44("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 48: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_3] and\n  [RL_rl_state_4] ) fired in the same clock cycle.\n",
					  179u);
static std::string const __str_literal_43("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 48: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_3] and\n  [RL_rl_state_5] ) fired in the same clock cycle.\n",
					  179u);
static std::string const __str_literal_42("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 48: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_3] and\n  [RL_rl_state_6] ) fired in the same clock cycle.\n",
					  179u);
static std::string const __str_literal_41("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 48: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_3] and\n  [RL_rl_state_7] ) fired in the same clock cycle.\n",
					  179u);
static std::string const __str_literal_40("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 48: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_3] and\n  [RL_rl_state_8] ) fired in the same clock cycle.\n",
					  179u);
static std::string const __str_literal_39("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 48: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_3] and\n  [RL_rl_state_9] ) fired in the same clock cycle.\n",
					  179u);
static std::string const __str_literal_51("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 59: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_4] and\n  [RL_rl_state_10] ) fired in the same clock cycle.\n",
					  180u);
static std::string const __str_literal_50("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 59: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_4] and\n  [RL_rl_state_11] ) fired in the same clock cycle.\n",
					  180u);
static std::string const __str_literal_49("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 59: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_4] and\n  [RL_rl_state_12] ) fired in the same clock cycle.\n",
					  180u);
static std::string const __str_literal_48("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 59: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_4] and\n  [RL_rl_state_13] ) fired in the same clock cycle.\n",
					  180u);
static std::string const __str_literal_47("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 59: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_4] and\n  [RL_rl_state_14] ) fired in the same clock cycle.\n",
					  180u);
static std::string const __str_literal_46("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 59: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_4] and\n  [RL_rl_state_15] ) fired in the same clock cycle.\n",
					  180u);
static std::string const __str_literal_45("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 59: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_4] and\n  [RL_rl_state_16] ) fired in the same clock cycle.\n",
					  180u);
static std::string const __str_literal_56("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 59: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_4] and\n  [RL_rl_state_5] ) fired in the same clock cycle.\n",
					  179u);
static std::string const __str_literal_55("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 59: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_4] and\n  [RL_rl_state_6] ) fired in the same clock cycle.\n",
					  179u);
static std::string const __str_literal_54("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 59: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_4] and\n  [RL_rl_state_7] ) fired in the same clock cycle.\n",
					  179u);
static std::string const __str_literal_53("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 59: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_4] and\n  [RL_rl_state_8] ) fired in the same clock cycle.\n",
					  179u);
static std::string const __str_literal_52("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 59: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_4] and\n  [RL_rl_state_9] ) fired in the same clock cycle.\n",
					  179u);
static std::string const __str_literal_63("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 70: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_5] and\n  [RL_rl_state_10] ) fired in the same clock cycle.\n",
					  180u);
static std::string const __str_literal_62("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 70: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_5] and\n  [RL_rl_state_11] ) fired in the same clock cycle.\n",
					  180u);
static std::string const __str_literal_61("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 70: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_5] and\n  [RL_rl_state_12] ) fired in the same clock cycle.\n",
					  180u);
static std::string const __str_literal_60("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 70: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_5] and\n  [RL_rl_state_13] ) fired in the same clock cycle.\n",
					  180u);
static std::string const __str_literal_59("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 70: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_5] and\n  [RL_rl_state_14] ) fired in the same clock cycle.\n",
					  180u);
static std::string const __str_literal_58("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 70: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_5] and\n  [RL_rl_state_15] ) fired in the same clock cycle.\n",
					  180u);
static std::string const __str_literal_57("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 70: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_5] and\n  [RL_rl_state_16] ) fired in the same clock cycle.\n",
					  180u);
static std::string const __str_literal_67("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 70: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_5] and\n  [RL_rl_state_6] ) fired in the same clock cycle.\n",
					  179u);
static std::string const __str_literal_66("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 70: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_5] and\n  [RL_rl_state_7] ) fired in the same clock cycle.\n",
					  179u);
static std::string const __str_literal_65("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 70: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_5] and\n  [RL_rl_state_8] ) fired in the same clock cycle.\n",
					  179u);
static std::string const __str_literal_64("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 70: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_5] and\n  [RL_rl_state_9] ) fired in the same clock cycle.\n",
					  179u);
static std::string const __str_literal_74("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 81: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_6] and\n  [RL_rl_state_10] ) fired in the same clock cycle.\n",
					  180u);
static std::string const __str_literal_73("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 81: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_6] and\n  [RL_rl_state_11] ) fired in the same clock cycle.\n",
					  180u);
static std::string const __str_literal_72("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 81: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_6] and\n  [RL_rl_state_12] ) fired in the same clock cycle.\n",
					  180u);
static std::string const __str_literal_71("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 81: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_6] and\n  [RL_rl_state_13] ) fired in the same clock cycle.\n",
					  180u);
static std::string const __str_literal_70("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 81: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_6] and\n  [RL_rl_state_14] ) fired in the same clock cycle.\n",
					  180u);
static std::string const __str_literal_69("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 81: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_6] and\n  [RL_rl_state_15] ) fired in the same clock cycle.\n",
					  180u);
static std::string const __str_literal_68("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 81: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_6] and\n  [RL_rl_state_16] ) fired in the same clock cycle.\n",
					  180u);
static std::string const __str_literal_77("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 81: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_6] and\n  [RL_rl_state_7] ) fired in the same clock cycle.\n",
					  179u);
static std::string const __str_literal_76("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 81: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_6] and\n  [RL_rl_state_8] ) fired in the same clock cycle.\n",
					  179u);
static std::string const __str_literal_75("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 81: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_6] and\n  [RL_rl_state_9] ) fired in the same clock cycle.\n",
					  179u);
static std::string const __str_literal_84("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 92: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_7] and\n  [RL_rl_state_10] ) fired in the same clock cycle.\n",
					  180u);
static std::string const __str_literal_83("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 92: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_7] and\n  [RL_rl_state_11] ) fired in the same clock cycle.\n",
					  180u);
static std::string const __str_literal_82("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 92: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_7] and\n  [RL_rl_state_12] ) fired in the same clock cycle.\n",
					  180u);
static std::string const __str_literal_81("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 92: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_7] and\n  [RL_rl_state_13] ) fired in the same clock cycle.\n",
					  180u);
static std::string const __str_literal_80("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 92: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_7] and\n  [RL_rl_state_14] ) fired in the same clock cycle.\n",
					  180u);
static std::string const __str_literal_79("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 92: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_7] and\n  [RL_rl_state_15] ) fired in the same clock cycle.\n",
					  180u);
static std::string const __str_literal_78("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 92: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_7] and\n  [RL_rl_state_16] ) fired in the same clock cycle.\n",
					  180u);
static std::string const __str_literal_86("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 92: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_7] and\n  [RL_rl_state_8] ) fired in the same clock cycle.\n",
					  179u);
static std::string const __str_literal_85("Error: \"../JTAG/src_BSV/Jtag.bsv\", line 86, column 92: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_state_7] and\n  [RL_rl_state_9] ) fired in the same clock cycle.\n",
					  179u);


/* Constructor */
MOD_mkJtag::MOD_mkJtag(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    __clk_handle_1(BAD_CLOCK_HANDLE),
    INST_bypass(simHdl, "bypass", this, 1u),
    INST_bypass_select(simHdl, "bypass_select", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_bypass_tdo(simHdl, "bypass_tdo", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_capture_dr(simHdl, "capture_dr", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_capture_ir(simHdl, "capture_ir", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_count(simHdl, "count", this, 4u, (tUInt8)0u, (tUInt8)0u),
    INST_debug_op(simHdl, "debug_op", this, 1u),
    INST_debug_select(simHdl, "debug_select", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_exit1_dr(simHdl, "exit1_dr", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_exit1_ir(simHdl, "exit1_ir", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_exit2_dr(simHdl, "exit2_dr", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_exit2_ir(simHdl, "exit2_ir", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_extest_select(simHdl, "extest_select", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_idcode(simHdl, "idcode", this, 32u),
    INST_idcode_select(simHdl, "idcode_select", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_idcode_tdo(simHdl, "idcode_tdo", this, 1u),
    INST_instr_tdo(simHdl, "instr_tdo", this, 1u),
    INST_instruction(simHdl, "instruction", this, 5u),
    INST_instruction2(simHdl, "instruction2", this, 5u),
    INST_instruction3(simHdl, "instruction3", this, 5u),
    INST_inverted(simHdl, "inverted", this),
    INST_latch_ir(simHdl, "latch_ir", this, 5u),
    INST_latch_ir_neg(simHdl, "latch_ir_neg", this, 5u),
    INST_pause_dr(simHdl, "pause_dr", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_pause_ir(simHdl, "pause_ir", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_run_test_idle(simHdl, "run_test_idle", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_sample_preload_select(simHdl, "sample_preload_select", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_scan_chain_op(simHdl, "scan_chain_op", this, 1u),
    INST_select_dr_scan(simHdl, "select_dr_scan", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_select_ir_scan(simHdl, "select_ir_scan", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_shift_dr(simHdl, "shift_dr", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_shift_ir(simHdl, "shift_ir", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_shift_ir_neg(simHdl, "shift_ir_neg", this, 1u),
    INST_tdi(simHdl, "tdi", this, 1u, (tUInt8)1u, (tUInt8)0u),
    INST_tdo(simHdl, "tdo", this, 1u),
    INST_tdo_enable(simHdl, "tdo_enable", this, 1u),
    INST_test_logic_reset(simHdl, "test_logic_reset", this, 1u, (tUInt8)1u, (tUInt8)0u),
    INST_tms(simHdl, "tms", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_tms_vec(simHdl, "tms_vec", this, 13u, 3078u, (tUInt8)0u),
    INST_update_dr(simHdl, "update_dr", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_update_ir(simHdl, "update_ir", this, 1u, (tUInt8)0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 161u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkJtag::init_symbols_0()
{
  init_symbol(&symbols[0u], "__me_check_0", SYM_RULE);
  init_symbol(&symbols[1u], "__me_check_1", SYM_RULE);
  init_symbol(&symbols[2u], "__me_check_10", SYM_RULE);
  init_symbol(&symbols[3u], "__me_check_11", SYM_RULE);
  init_symbol(&symbols[4u], "__me_check_12", SYM_RULE);
  init_symbol(&symbols[5u], "__me_check_13", SYM_RULE);
  init_symbol(&symbols[6u], "__me_check_14", SYM_RULE);
  init_symbol(&symbols[7u], "__me_check_2", SYM_RULE);
  init_symbol(&symbols[8u], "__me_check_3", SYM_RULE);
  init_symbol(&symbols[9u], "__me_check_4", SYM_RULE);
  init_symbol(&symbols[10u], "__me_check_5", SYM_RULE);
  init_symbol(&symbols[11u], "__me_check_6", SYM_RULE);
  init_symbol(&symbols[12u], "__me_check_7", SYM_RULE);
  init_symbol(&symbols[13u], "__me_check_8", SYM_RULE);
  init_symbol(&symbols[14u], "__me_check_9", SYM_RULE);
  init_symbol(&symbols[15u], "bypass", SYM_MODULE, &INST_bypass);
  init_symbol(&symbols[16u], "bypass_select", SYM_MODULE, &INST_bypass_select);
  init_symbol(&symbols[17u], "bypass_tdo", SYM_MODULE, &INST_bypass_tdo);
  init_symbol(&symbols[18u], "CAN_FIRE___me_check_0", SYM_DEF, &DEF_CAN_FIRE___me_check_0, 1u);
  init_symbol(&symbols[19u], "CAN_FIRE___me_check_1", SYM_DEF, &DEF_CAN_FIRE___me_check_1, 1u);
  init_symbol(&symbols[20u], "CAN_FIRE___me_check_10", SYM_DEF, &DEF_CAN_FIRE___me_check_10, 1u);
  init_symbol(&symbols[21u], "CAN_FIRE___me_check_11", SYM_DEF, &DEF_CAN_FIRE___me_check_11, 1u);
  init_symbol(&symbols[22u], "CAN_FIRE___me_check_12", SYM_DEF, &DEF_CAN_FIRE___me_check_12, 1u);
  init_symbol(&symbols[23u], "CAN_FIRE___me_check_13", SYM_DEF, &DEF_CAN_FIRE___me_check_13, 1u);
  init_symbol(&symbols[24u], "CAN_FIRE___me_check_14", SYM_DEF, &DEF_CAN_FIRE___me_check_14, 1u);
  init_symbol(&symbols[25u], "CAN_FIRE___me_check_2", SYM_DEF, &DEF_CAN_FIRE___me_check_2, 1u);
  init_symbol(&symbols[26u], "CAN_FIRE___me_check_3", SYM_DEF, &DEF_CAN_FIRE___me_check_3, 1u);
  init_symbol(&symbols[27u], "CAN_FIRE___me_check_4", SYM_DEF, &DEF_CAN_FIRE___me_check_4, 1u);
  init_symbol(&symbols[28u], "CAN_FIRE___me_check_5", SYM_DEF, &DEF_CAN_FIRE___me_check_5, 1u);
  init_symbol(&symbols[29u], "CAN_FIRE___me_check_6", SYM_DEF, &DEF_CAN_FIRE___me_check_6, 1u);
  init_symbol(&symbols[30u], "CAN_FIRE___me_check_7", SYM_DEF, &DEF_CAN_FIRE___me_check_7, 1u);
  init_symbol(&symbols[31u], "CAN_FIRE___me_check_8", SYM_DEF, &DEF_CAN_FIRE___me_check_8, 1u);
  init_symbol(&symbols[32u], "CAN_FIRE___me_check_9", SYM_DEF, &DEF_CAN_FIRE___me_check_9, 1u);
  init_symbol(&symbols[33u], "CAN_FIRE_RL_rl_assign_op", SYM_DEF, &DEF_CAN_FIRE_RL_rl_assign_op, 1u);
  init_symbol(&symbols[34u], "CAN_FIRE_RL_rl_bypass", SYM_DEF, &DEF_CAN_FIRE_RL_rl_bypass, 1u);
  init_symbol(&symbols[35u],
	      "CAN_FIRE_RL_rl_instruction",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_rl_instruction,
	      1u);
  init_symbol(&symbols[36u], "CAN_FIRE_RL_rl_latch_ir", SYM_DEF, &DEF_CAN_FIRE_RL_rl_latch_ir, 1u);
  init_symbol(&symbols[37u],
	      "CAN_FIRE_RL_rl_print_state",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_rl_print_state,
	      1u);
  init_symbol(&symbols[38u],
	      "CAN_FIRE_RL_rl_process_instr",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_rl_process_instr,
	      1u);
  init_symbol(&symbols[39u], "CAN_FIRE_RL_rl_state_1", SYM_DEF, &DEF_CAN_FIRE_RL_rl_state_1, 1u);
  init_symbol(&symbols[40u], "CAN_FIRE_RL_rl_state_10", SYM_DEF, &DEF_CAN_FIRE_RL_rl_state_10, 1u);
  init_symbol(&symbols[41u], "CAN_FIRE_RL_rl_state_11", SYM_DEF, &DEF_CAN_FIRE_RL_rl_state_11, 1u);
  init_symbol(&symbols[42u], "CAN_FIRE_RL_rl_state_12", SYM_DEF, &DEF_CAN_FIRE_RL_rl_state_12, 1u);
  init_symbol(&symbols[43u], "CAN_FIRE_RL_rl_state_13", SYM_DEF, &DEF_CAN_FIRE_RL_rl_state_13, 1u);
  init_symbol(&symbols[44u], "CAN_FIRE_RL_rl_state_14", SYM_DEF, &DEF_CAN_FIRE_RL_rl_state_14, 1u);
  init_symbol(&symbols[45u], "CAN_FIRE_RL_rl_state_15", SYM_DEF, &DEF_CAN_FIRE_RL_rl_state_15, 1u);
  init_symbol(&symbols[46u], "CAN_FIRE_RL_rl_state_16", SYM_DEF, &DEF_CAN_FIRE_RL_rl_state_16, 1u);
  init_symbol(&symbols[47u], "CAN_FIRE_RL_rl_state_2", SYM_DEF, &DEF_CAN_FIRE_RL_rl_state_2, 1u);
  init_symbol(&symbols[48u], "CAN_FIRE_RL_rl_state_3", SYM_DEF, &DEF_CAN_FIRE_RL_rl_state_3, 1u);
  init_symbol(&symbols[49u], "CAN_FIRE_RL_rl_state_4", SYM_DEF, &DEF_CAN_FIRE_RL_rl_state_4, 1u);
  init_symbol(&symbols[50u], "CAN_FIRE_RL_rl_state_5", SYM_DEF, &DEF_CAN_FIRE_RL_rl_state_5, 1u);
  init_symbol(&symbols[51u], "CAN_FIRE_RL_rl_state_6", SYM_DEF, &DEF_CAN_FIRE_RL_rl_state_6, 1u);
  init_symbol(&symbols[52u], "CAN_FIRE_RL_rl_state_7", SYM_DEF, &DEF_CAN_FIRE_RL_rl_state_7, 1u);
  init_symbol(&symbols[53u], "CAN_FIRE_RL_rl_state_8", SYM_DEF, &DEF_CAN_FIRE_RL_rl_state_8, 1u);
  init_symbol(&symbols[54u], "CAN_FIRE_RL_rl_state_9", SYM_DEF, &DEF_CAN_FIRE_RL_rl_state_9, 1u);
  init_symbol(&symbols[55u], "CAN_FIRE_RL_rl_tp", SYM_DEF, &DEF_CAN_FIRE_RL_rl_tp, 1u);
  init_symbol(&symbols[56u], "capture_dr", SYM_MODULE, &INST_capture_dr);
  init_symbol(&symbols[57u], "capture_ir", SYM_MODULE, &INST_capture_ir);
  init_symbol(&symbols[58u], "capture_ir__h3447", SYM_DEF, &DEF_capture_ir__h3447, 1u);
  init_symbol(&symbols[59u], "count", SYM_MODULE, &INST_count);
  init_symbol(&symbols[60u], "debug_op", SYM_MODULE, &INST_debug_op);
  init_symbol(&symbols[61u], "debug_select", SYM_MODULE, &INST_debug_select);
  init_symbol(&symbols[62u], "exit1_dr", SYM_MODULE, &INST_exit1_dr);
  init_symbol(&symbols[63u], "exit1_ir", SYM_MODULE, &INST_exit1_ir);
  init_symbol(&symbols[64u], "exit2_dr", SYM_MODULE, &INST_exit2_dr);
  init_symbol(&symbols[65u], "exit2_ir", SYM_MODULE, &INST_exit2_ir);
  init_symbol(&symbols[66u], "extest_select", SYM_MODULE, &INST_extest_select);
  init_symbol(&symbols[67u], "i__h3513", SYM_DEF, &DEF_i__h3513, 4u);
  init_symbol(&symbols[68u], "idcode", SYM_MODULE, &INST_idcode);
  init_symbol(&symbols[69u], "idcode_select", SYM_MODULE, &INST_idcode_select);
  init_symbol(&symbols[70u], "idcode_tdo", SYM_MODULE, &INST_idcode_tdo);
  init_symbol(&symbols[71u], "instr_tdo", SYM_MODULE, &INST_instr_tdo);
  init_symbol(&symbols[72u], "instruction", SYM_MODULE, &INST_instruction);
  init_symbol(&symbols[73u], "instruction2", SYM_MODULE, &INST_instruction2);
  init_symbol(&symbols[74u], "instruction3", SYM_MODULE, &INST_instruction3);
  init_symbol(&symbols[75u], "inverted", SYM_MODULE, &INST_inverted);
  init_symbol(&symbols[76u], "latch_ir", SYM_MODULE, &INST_latch_ir);
  init_symbol(&symbols[77u], "latch_ir_neg", SYM_MODULE, &INST_latch_ir_neg);
  init_symbol(&symbols[78u], "pause_dr", SYM_MODULE, &INST_pause_dr);
  init_symbol(&symbols[79u], "pause_ir", SYM_MODULE, &INST_pause_ir);
  init_symbol(&symbols[80u], "RL_rl_assign_op", SYM_RULE);
  init_symbol(&symbols[81u], "RL_rl_bypass", SYM_RULE);
  init_symbol(&symbols[82u], "RL_rl_instruction", SYM_RULE);
  init_symbol(&symbols[83u], "RL_rl_latch_ir", SYM_RULE);
  init_symbol(&symbols[84u], "RL_rl_print_state", SYM_RULE);
  init_symbol(&symbols[85u], "RL_rl_process_instr", SYM_RULE);
  init_symbol(&symbols[86u], "RL_rl_state_1", SYM_RULE);
  init_symbol(&symbols[87u], "RL_rl_state_10", SYM_RULE);
  init_symbol(&symbols[88u], "RL_rl_state_11", SYM_RULE);
  init_symbol(&symbols[89u], "RL_rl_state_12", SYM_RULE);
  init_symbol(&symbols[90u], "RL_rl_state_13", SYM_RULE);
  init_symbol(&symbols[91u], "RL_rl_state_14", SYM_RULE);
  init_symbol(&symbols[92u], "RL_rl_state_15", SYM_RULE);
  init_symbol(&symbols[93u], "RL_rl_state_16", SYM_RULE);
  init_symbol(&symbols[94u], "RL_rl_state_2", SYM_RULE);
  init_symbol(&symbols[95u], "RL_rl_state_3", SYM_RULE);
  init_symbol(&symbols[96u], "RL_rl_state_4", SYM_RULE);
  init_symbol(&symbols[97u], "RL_rl_state_5", SYM_RULE);
  init_symbol(&symbols[98u], "RL_rl_state_6", SYM_RULE);
  init_symbol(&symbols[99u], "RL_rl_state_7", SYM_RULE);
  init_symbol(&symbols[100u], "RL_rl_state_8", SYM_RULE);
  init_symbol(&symbols[101u], "RL_rl_state_9", SYM_RULE);
  init_symbol(&symbols[102u], "RL_rl_tp", SYM_RULE);
  init_symbol(&symbols[103u], "run_test_idle", SYM_MODULE, &INST_run_test_idle);
  init_symbol(&symbols[104u], "sample_preload_select", SYM_MODULE, &INST_sample_preload_select);
  init_symbol(&symbols[105u], "scan_chain_op", SYM_MODULE, &INST_scan_chain_op);
  init_symbol(&symbols[106u], "select_dr_scan", SYM_MODULE, &INST_select_dr_scan);
  init_symbol(&symbols[107u], "select_ir_scan", SYM_MODULE, &INST_select_ir_scan);
  init_symbol(&symbols[108u], "shift_dr", SYM_MODULE, &INST_shift_dr);
  init_symbol(&symbols[109u], "shift_dr__h3465", SYM_DEF, &DEF_shift_dr__h3465, 1u);
  init_symbol(&symbols[110u], "shift_ir", SYM_MODULE, &INST_shift_ir);
  init_symbol(&symbols[111u], "shift_ir__h3372", SYM_DEF, &DEF_shift_ir__h3372, 1u);
  init_symbol(&symbols[112u], "shift_ir_neg", SYM_MODULE, &INST_shift_ir_neg);
  init_symbol(&symbols[113u], "tdi", SYM_MODULE, &INST_tdi);
  init_symbol(&symbols[114u], "tdo", SYM_MODULE, &INST_tdo);
  init_symbol(&symbols[115u], "tdo_enable", SYM_MODULE, &INST_tdo_enable);
  init_symbol(&symbols[116u], "test_logic_reset", SYM_MODULE, &INST_test_logic_reset);
  init_symbol(&symbols[117u], "test_logic_reset__h3484", SYM_DEF, &DEF_test_logic_reset__h3484, 1u);
  init_symbol(&symbols[118u], "tms", SYM_MODULE, &INST_tms);
  init_symbol(&symbols[119u], "tms_vec", SYM_MODULE, &INST_tms_vec);
  init_symbol(&symbols[120u], "update_dr", SYM_MODULE, &INST_update_dr);
  init_symbol(&symbols[121u], "update_ir", SYM_MODULE, &INST_update_ir);
  init_symbol(&symbols[122u], "update_ir__h3482", SYM_DEF, &DEF_update_ir__h3482, 1u);
  init_symbol(&symbols[123u], "WILL_FIRE___me_check_0", SYM_DEF, &DEF_WILL_FIRE___me_check_0, 1u);
  init_symbol(&symbols[124u], "WILL_FIRE___me_check_1", SYM_DEF, &DEF_WILL_FIRE___me_check_1, 1u);
  init_symbol(&symbols[125u], "WILL_FIRE___me_check_10", SYM_DEF, &DEF_WILL_FIRE___me_check_10, 1u);
  init_symbol(&symbols[126u], "WILL_FIRE___me_check_11", SYM_DEF, &DEF_WILL_FIRE___me_check_11, 1u);
  init_symbol(&symbols[127u], "WILL_FIRE___me_check_12", SYM_DEF, &DEF_WILL_FIRE___me_check_12, 1u);
  init_symbol(&symbols[128u], "WILL_FIRE___me_check_13", SYM_DEF, &DEF_WILL_FIRE___me_check_13, 1u);
  init_symbol(&symbols[129u], "WILL_FIRE___me_check_14", SYM_DEF, &DEF_WILL_FIRE___me_check_14, 1u);
  init_symbol(&symbols[130u], "WILL_FIRE___me_check_2", SYM_DEF, &DEF_WILL_FIRE___me_check_2, 1u);
  init_symbol(&symbols[131u], "WILL_FIRE___me_check_3", SYM_DEF, &DEF_WILL_FIRE___me_check_3, 1u);
  init_symbol(&symbols[132u], "WILL_FIRE___me_check_4", SYM_DEF, &DEF_WILL_FIRE___me_check_4, 1u);
  init_symbol(&symbols[133u], "WILL_FIRE___me_check_5", SYM_DEF, &DEF_WILL_FIRE___me_check_5, 1u);
  init_symbol(&symbols[134u], "WILL_FIRE___me_check_6", SYM_DEF, &DEF_WILL_FIRE___me_check_6, 1u);
  init_symbol(&symbols[135u], "WILL_FIRE___me_check_7", SYM_DEF, &DEF_WILL_FIRE___me_check_7, 1u);
  init_symbol(&symbols[136u], "WILL_FIRE___me_check_8", SYM_DEF, &DEF_WILL_FIRE___me_check_8, 1u);
  init_symbol(&symbols[137u], "WILL_FIRE___me_check_9", SYM_DEF, &DEF_WILL_FIRE___me_check_9, 1u);
  init_symbol(&symbols[138u],
	      "WILL_FIRE_RL_rl_assign_op",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_rl_assign_op,
	      1u);
  init_symbol(&symbols[139u], "WILL_FIRE_RL_rl_bypass", SYM_DEF, &DEF_WILL_FIRE_RL_rl_bypass, 1u);
  init_symbol(&symbols[140u],
	      "WILL_FIRE_RL_rl_instruction",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_rl_instruction,
	      1u);
  init_symbol(&symbols[141u], "WILL_FIRE_RL_rl_latch_ir", SYM_DEF, &DEF_WILL_FIRE_RL_rl_latch_ir, 1u);
  init_symbol(&symbols[142u],
	      "WILL_FIRE_RL_rl_print_state",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_rl_print_state,
	      1u);
  init_symbol(&symbols[143u],
	      "WILL_FIRE_RL_rl_process_instr",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_rl_process_instr,
	      1u);
  init_symbol(&symbols[144u], "WILL_FIRE_RL_rl_state_1", SYM_DEF, &DEF_WILL_FIRE_RL_rl_state_1, 1u);
  init_symbol(&symbols[145u], "WILL_FIRE_RL_rl_state_10", SYM_DEF, &DEF_WILL_FIRE_RL_rl_state_10, 1u);
  init_symbol(&symbols[146u], "WILL_FIRE_RL_rl_state_11", SYM_DEF, &DEF_WILL_FIRE_RL_rl_state_11, 1u);
  init_symbol(&symbols[147u], "WILL_FIRE_RL_rl_state_12", SYM_DEF, &DEF_WILL_FIRE_RL_rl_state_12, 1u);
  init_symbol(&symbols[148u], "WILL_FIRE_RL_rl_state_13", SYM_DEF, &DEF_WILL_FIRE_RL_rl_state_13, 1u);
  init_symbol(&symbols[149u], "WILL_FIRE_RL_rl_state_14", SYM_DEF, &DEF_WILL_FIRE_RL_rl_state_14, 1u);
  init_symbol(&symbols[150u], "WILL_FIRE_RL_rl_state_15", SYM_DEF, &DEF_WILL_FIRE_RL_rl_state_15, 1u);
  init_symbol(&symbols[151u], "WILL_FIRE_RL_rl_state_16", SYM_DEF, &DEF_WILL_FIRE_RL_rl_state_16, 1u);
  init_symbol(&symbols[152u], "WILL_FIRE_RL_rl_state_2", SYM_DEF, &DEF_WILL_FIRE_RL_rl_state_2, 1u);
  init_symbol(&symbols[153u], "WILL_FIRE_RL_rl_state_3", SYM_DEF, &DEF_WILL_FIRE_RL_rl_state_3, 1u);
  init_symbol(&symbols[154u], "WILL_FIRE_RL_rl_state_4", SYM_DEF, &DEF_WILL_FIRE_RL_rl_state_4, 1u);
  init_symbol(&symbols[155u], "WILL_FIRE_RL_rl_state_5", SYM_DEF, &DEF_WILL_FIRE_RL_rl_state_5, 1u);
  init_symbol(&symbols[156u], "WILL_FIRE_RL_rl_state_6", SYM_DEF, &DEF_WILL_FIRE_RL_rl_state_6, 1u);
  init_symbol(&symbols[157u], "WILL_FIRE_RL_rl_state_7", SYM_DEF, &DEF_WILL_FIRE_RL_rl_state_7, 1u);
  init_symbol(&symbols[158u], "WILL_FIRE_RL_rl_state_8", SYM_DEF, &DEF_WILL_FIRE_RL_rl_state_8, 1u);
  init_symbol(&symbols[159u], "WILL_FIRE_RL_rl_state_9", SYM_DEF, &DEF_WILL_FIRE_RL_rl_state_9, 1u);
  init_symbol(&symbols[160u], "WILL_FIRE_RL_rl_tp", SYM_DEF, &DEF_WILL_FIRE_RL_rl_tp, 1u);
}


/* Rule actions */

void MOD_mkJtag::RL_rl_state_1()
{
  DEF_tms__h3231 = INST_tms.METH_read();
  DEF_NOT_tms___d3 = !DEF_tms__h3231;
  if (DEF_NOT_tms___d3)
    INST_test_logic_reset.METH_write((tUInt8)0u);
  if (DEF_NOT_tms___d3)
    INST_run_test_idle.METH_write((tUInt8)1u);
}

void MOD_mkJtag::RL_rl_state_2()
{
  DEF_tms__h3231 = INST_tms.METH_read();
  if (DEF_tms__h3231)
    INST_run_test_idle.METH_write((tUInt8)0u);
  if (DEF_tms__h3231)
    INST_select_dr_scan.METH_write((tUInt8)1u);
}

void MOD_mkJtag::RL_rl_state_3()
{
  DEF_tms__h3231 = INST_tms.METH_read();
  DEF_NOT_tms___d3 = !DEF_tms__h3231;
  INST_select_dr_scan.METH_write((tUInt8)0u);
  if (DEF_tms__h3231)
    INST_select_ir_scan.METH_write((tUInt8)1u);
  if (DEF_NOT_tms___d3)
    INST_capture_dr.METH_write((tUInt8)1u);
}

void MOD_mkJtag::RL_rl_state_4()
{
  DEF_tms__h3231 = INST_tms.METH_read();
  DEF_NOT_tms___d3 = !DEF_tms__h3231;
  if (DEF_tms__h3231)
    INST_test_logic_reset.METH_write((tUInt8)1u);
  if (DEF_NOT_tms___d3)
    INST_capture_ir.METH_write((tUInt8)1u);
  INST_select_ir_scan.METH_write((tUInt8)0u);
}

void MOD_mkJtag::RL_rl_state_5()
{
  DEF_tms__h3231 = INST_tms.METH_read();
  DEF_NOT_tms___d3 = !DEF_tms__h3231;
  if (DEF_tms__h3231)
    INST_exit1_dr.METH_write((tUInt8)1u);
  if (DEF_NOT_tms___d3)
    INST_shift_dr.METH_write((tUInt8)1u);
  INST_capture_dr.METH_write((tUInt8)0u);
}

void MOD_mkJtag::RL_rl_state_6()
{
  DEF_tms__h3231 = INST_tms.METH_read();
  DEF_NOT_tms___d3 = !DEF_tms__h3231;
  if (DEF_tms__h3231)
    INST_exit2_ir.METH_write((tUInt8)1u);
  if (DEF_NOT_tms___d3)
    INST_shift_ir.METH_write((tUInt8)1u);
  INST_capture_ir.METH_write((tUInt8)0u);
}

void MOD_mkJtag::RL_rl_state_7()
{
  DEF_tms__h3231 = INST_tms.METH_read();
  if (DEF_tms__h3231)
    INST_shift_dr.METH_write((tUInt8)0u);
  if (DEF_tms__h3231)
    INST_exit1_dr.METH_write((tUInt8)1u);
}

void MOD_mkJtag::RL_rl_state_8()
{
  DEF_tms__h3231 = INST_tms.METH_read();
  if (DEF_tms__h3231)
    INST_shift_ir.METH_write((tUInt8)0u);
  if (DEF_tms__h3231)
    INST_exit1_ir.METH_write((tUInt8)1u);
}

void MOD_mkJtag::RL_rl_state_9()
{
  DEF_tms__h3231 = INST_tms.METH_read();
  DEF_NOT_tms___d3 = !DEF_tms__h3231;
  if (DEF_tms__h3231)
    INST_update_dr.METH_write((tUInt8)1u);
  if (DEF_NOT_tms___d3)
    INST_pause_dr.METH_write((tUInt8)1u);
  INST_exit1_dr.METH_write((tUInt8)0u);
}

void MOD_mkJtag::RL_rl_state_10()
{
  DEF_tms__h3231 = INST_tms.METH_read();
  DEF_NOT_tms___d3 = !DEF_tms__h3231;
  if (DEF_tms__h3231)
    INST_update_ir.METH_write((tUInt8)1u);
  if (DEF_NOT_tms___d3)
    INST_pause_ir.METH_write((tUInt8)1u);
  INST_exit1_ir.METH_write((tUInt8)0u);
}

void MOD_mkJtag::RL_rl_state_11()
{
  DEF_tms__h3231 = INST_tms.METH_read();
  if (DEF_tms__h3231)
    INST_pause_dr.METH_write((tUInt8)0u);
  if (DEF_tms__h3231)
    INST_exit2_dr.METH_write((tUInt8)1u);
}

void MOD_mkJtag::RL_rl_state_12()
{
  DEF_tms__h3231 = INST_tms.METH_read();
  if (DEF_tms__h3231)
    INST_pause_ir.METH_write((tUInt8)0u);
  if (DEF_tms__h3231)
    INST_exit2_ir.METH_write((tUInt8)1u);
}

void MOD_mkJtag::RL_rl_state_13()
{
  DEF_tms__h3231 = INST_tms.METH_read();
  DEF_NOT_tms___d3 = !DEF_tms__h3231;
  if (DEF_tms__h3231)
    INST_update_ir.METH_write((tUInt8)1u);
  if (DEF_NOT_tms___d3)
    INST_shift_ir.METH_write((tUInt8)1u);
  INST_exit2_ir.METH_write((tUInt8)0u);
}

void MOD_mkJtag::RL_rl_state_14()
{
  DEF_tms__h3231 = INST_tms.METH_read();
  DEF_NOT_tms___d3 = !DEF_tms__h3231;
  if (DEF_tms__h3231)
    INST_update_dr.METH_write((tUInt8)1u);
  if (DEF_NOT_tms___d3)
    INST_shift_dr.METH_write((tUInt8)1u);
  INST_exit2_dr.METH_write((tUInt8)0u);
}

void MOD_mkJtag::RL_rl_state_15()
{
  DEF_tms__h3231 = INST_tms.METH_read();
  DEF_NOT_tms___d3 = !DEF_tms__h3231;
  if (DEF_tms__h3231)
    INST_select_dr_scan.METH_write((tUInt8)1u);
  if (DEF_NOT_tms___d3)
    INST_run_test_idle.METH_write((tUInt8)1u);
  INST_update_dr.METH_write((tUInt8)0u);
}

void MOD_mkJtag::RL_rl_state_16()
{
  DEF_tms__h3231 = INST_tms.METH_read();
  DEF_NOT_tms___d3 = !DEF_tms__h3231;
  if (DEF_tms__h3231)
    INST_select_ir_scan.METH_write((tUInt8)1u);
  if (DEF_NOT_tms___d3)
    INST_run_test_idle.METH_write((tUInt8)1u);
  INST_update_ir.METH_write((tUInt8)0u);
}

void MOD_mkJtag::RL_rl_print_state()
{
  tUInt8 DEF__read__h1092;
  DEF_update_ir__h3482 = INST_update_ir.METH_read();
  DEF_update_dr___d17 = INST_update_dr.METH_read();
  DEF_exit2_dr___d16 = INST_exit2_dr.METH_read();
  DEF_exit2_ir___d15 = INST_exit2_ir.METH_read();
  DEF_pause_ir___d14 = INST_pause_ir.METH_read();
  DEF_pause_dr___d13 = INST_pause_dr.METH_read();
  DEF_exit1_ir___d12 = INST_exit1_ir.METH_read();
  DEF_exit1_dr___d11 = INST_exit1_dr.METH_read();
  DEF_shift_ir__h3372 = INST_shift_ir.METH_read();
  DEF_shift_dr__h3465 = INST_shift_dr.METH_read();
  DEF_capture_ir__h3447 = INST_capture_ir.METH_read();
  DEF_select_ir_scan___d6 = INST_select_ir_scan.METH_read();
  DEF_capture_dr___d7 = INST_capture_dr.METH_read();
  DEF_select_dr_scan___d5 = INST_select_dr_scan.METH_read();
  DEF_run_test_idle___d4 = INST_run_test_idle.METH_read();
  DEF_test_logic_reset__h3484 = INST_test_logic_reset.METH_read();
  DEF_temp___1__h3483 = INST_instruction.METH_read();
  DEF__read__h1092 = INST_bypass.METH_read();
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_display(sim_hdl,
		   this,
		   "s,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
		   &__str_literal_1,
		   DEF_test_logic_reset__h3484,
		   DEF_run_test_idle___d4,
		   DEF_select_dr_scan___d5,
		   DEF_select_ir_scan___d6,
		   DEF_capture_dr___d7,
		   DEF_capture_ir__h3447,
		   DEF_shift_dr__h3465,
		   DEF_shift_ir__h3372,
		   DEF_exit1_dr___d11,
		   DEF_exit1_ir___d12,
		   DEF_pause_dr___d13,
		   DEF_pause_ir___d14,
		   DEF_exit2_dr___d16,
		   DEF_exit2_ir___d15,
		   DEF_update_dr___d17,
		   DEF_update_ir__h3482);
    dollar_display(sim_hdl, this, "s,5,1", &__str_literal_2, DEF_temp___1__h3483, DEF__read__h1092);
  }
}

void MOD_mkJtag::RL_rl_instruction()
{
  tUInt8 DEF_temp___1__h3375;
  tUInt8 DEF_x__h3367;
  tUInt8 DEF_t__h3374;
  DEF_shift_ir__h3372 = INST_shift_ir.METH_read();
  DEF_capture_ir__h3447 = INST_capture_ir.METH_read();
  DEF_temp___1__h3483 = INST_instruction.METH_read();
  DEF__read__h203 = INST_tdi.METH_read();
  DEF_t__h3374 = (tUInt8)(DEF_temp___1__h3483 >> 1u);
  DEF_temp___1__h3375 = (tUInt8)31u & ((DEF__read__h203 << 4u) | DEF_t__h3374);
  DEF_x__h3367 = DEF_shift_ir__h3372 ? DEF_temp___1__h3375 : (DEF_capture_ir__h3447 ? (tUInt8)21u : (tUInt8)0u);
  INST_instruction.METH_write(DEF_x__h3367);
}

void MOD_mkJtag::RL_rl_bypass()
{
  tUInt8 DEF_x__h3458;
  DEF_shift_dr__h3465 = INST_shift_dr.METH_read();
  DEF_test_logic_reset__h3484 = INST_test_logic_reset.METH_read();
  DEF__read__h203 = INST_tdi.METH_read();
  DEF_x__h3458 = !DEF_test_logic_reset__h3484 && (DEF_shift_dr__h3465 && DEF__read__h203);
  INST_bypass.METH_write(DEF_x__h3458);
}

void MOD_mkJtag::RL_rl_latch_ir()
{
  tUInt8 DEF_x__h3477;
  DEF_update_ir__h3482 = INST_update_ir.METH_read();
  DEF_test_logic_reset__h3484 = INST_test_logic_reset.METH_read();
  DEF_temp___1__h3483 = INST_instruction.METH_read();
  DEF_x__h3477 = DEF_update_ir__h3482 ? DEF_temp___1__h3483 : (DEF_test_logic_reset__h3484 ? (tUInt8)10u : (tUInt8)0u);
  INST_latch_ir.METH_write(DEF_x__h3477);
}

void MOD_mkJtag::RL_rl_tp()
{
  tUInt8 DEF_x__h3532;
  tUInt8 DEF_x__h3503;
  tUInt32 DEF_bs__h3515;
  DEF_bs__h3515 = INST_tms_vec.METH_read();
  DEF_i__h3513 = INST_count.METH_read();
  DEF_x__h3503 = primExtract8(1u,
			      13u,
			      (tUInt32)(DEF_bs__h3515),
			      4u,
			      (tUInt8)(DEF_i__h3513),
			      4u,
			      (tUInt8)(DEF_i__h3513));
  DEF_x__h3532 = (tUInt8)15u & (DEF_i__h3513 + (tUInt8)1u);
  INST_tms.METH_write(DEF_x__h3503);
  INST_count.METH_write(DEF_x__h3532);
}

void MOD_mkJtag::RL_rl_process_instr()
{
  tUInt8 DEF_x__h3601;
  tUInt8 DEF_latch_ir_6_EQ_0b10___d38;
  tUInt8 DEF_latch_ir_6_EQ_0b100___d37;
  DEF_latch_ir___d36 = INST_latch_ir.METH_read();
  DEF_latch_ir_6_EQ_0b100___d37 = DEF_latch_ir___d36 == (tUInt8)4u;
  DEF_latch_ir_6_EQ_0b10___d38 = DEF_latch_ir___d36 == (tUInt8)2u;
  DEF_x__h3601 = !DEF_latch_ir_6_EQ_0b100___d37 && !DEF_latch_ir_6_EQ_0b10___d38;
  INST_extest_select.METH_write(DEF_latch_ir_6_EQ_0b100___d37);
  INST_sample_preload_select.METH_write(DEF_latch_ir_6_EQ_0b10___d38);
  INST_bypass_select.METH_write(DEF_x__h3601);
}

void MOD_mkJtag::RL_rl_assign_op()
{
  tUInt8 DEF_x__h3623;
  tUInt8 DEF_ans__h3644;
  tUInt8 DEF_ans__h3645;
  DEF_latch_ir___d36 = INST_latch_ir.METH_read();
  DEF_ans__h3645 = INST_bypass_tdo.METH_read();
  DEF_ans__h3644 = INST_scan_chain_op.METH_read();
  switch (DEF_latch_ir___d36) {
  case (tUInt8)2u:
  case (tUInt8)4u:
    DEF_x__h3623 = DEF_ans__h3644;
    break;
  default:
    DEF_x__h3623 = DEF_ans__h3645;
  }
  INST_tdo.METH_write(DEF_x__h3623);
}

void MOD_mkJtag::__me_check_0()
{
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_WILL_FIRE_RL_rl_state_1 && DEF_WILL_FIRE_RL_rl_state_16)
      dollar_error(sim_hdl, this, "s", &__str_literal_3);
    if (DEF_WILL_FIRE_RL_rl_state_1 && DEF_WILL_FIRE_RL_rl_state_15)
      dollar_error(sim_hdl, this, "s", &__str_literal_4);
    if (DEF_WILL_FIRE_RL_rl_state_1 && DEF_WILL_FIRE_RL_rl_state_14)
      dollar_error(sim_hdl, this, "s", &__str_literal_5);
    if (DEF_WILL_FIRE_RL_rl_state_1 && DEF_WILL_FIRE_RL_rl_state_13)
      dollar_error(sim_hdl, this, "s", &__str_literal_6);
    if (DEF_WILL_FIRE_RL_rl_state_1 && DEF_WILL_FIRE_RL_rl_state_12)
      dollar_error(sim_hdl, this, "s", &__str_literal_7);
    if (DEF_WILL_FIRE_RL_rl_state_1 && DEF_WILL_FIRE_RL_rl_state_11)
      dollar_error(sim_hdl, this, "s", &__str_literal_8);
    if (DEF_WILL_FIRE_RL_rl_state_1 && DEF_WILL_FIRE_RL_rl_state_10)
      dollar_error(sim_hdl, this, "s", &__str_literal_9);
    if (DEF_WILL_FIRE_RL_rl_state_1 && DEF_WILL_FIRE_RL_rl_state_9)
      dollar_error(sim_hdl, this, "s", &__str_literal_10);
    if (DEF_WILL_FIRE_RL_rl_state_1 && DEF_WILL_FIRE_RL_rl_state_8)
      dollar_error(sim_hdl, this, "s", &__str_literal_11);
    if (DEF_WILL_FIRE_RL_rl_state_1 && DEF_WILL_FIRE_RL_rl_state_7)
      dollar_error(sim_hdl, this, "s", &__str_literal_12);
    if (DEF_WILL_FIRE_RL_rl_state_1 && DEF_WILL_FIRE_RL_rl_state_6)
      dollar_error(sim_hdl, this, "s", &__str_literal_13);
    if (DEF_WILL_FIRE_RL_rl_state_1 && DEF_WILL_FIRE_RL_rl_state_5)
      dollar_error(sim_hdl, this, "s", &__str_literal_14);
    if (DEF_WILL_FIRE_RL_rl_state_1 && DEF_WILL_FIRE_RL_rl_state_4)
      dollar_error(sim_hdl, this, "s", &__str_literal_15);
    if (DEF_WILL_FIRE_RL_rl_state_1 && DEF_WILL_FIRE_RL_rl_state_3)
      dollar_error(sim_hdl, this, "s", &__str_literal_16);
    if (DEF_WILL_FIRE_RL_rl_state_1 && DEF_WILL_FIRE_RL_rl_state_2)
      dollar_error(sim_hdl, this, "s", &__str_literal_17);
  }
}

void MOD_mkJtag::__me_check_1()
{
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_WILL_FIRE_RL_rl_state_2 && DEF_WILL_FIRE_RL_rl_state_16)
      dollar_error(sim_hdl, this, "s", &__str_literal_18);
    if (DEF_WILL_FIRE_RL_rl_state_2 && DEF_WILL_FIRE_RL_rl_state_15)
      dollar_error(sim_hdl, this, "s", &__str_literal_19);
    if (DEF_WILL_FIRE_RL_rl_state_2 && DEF_WILL_FIRE_RL_rl_state_14)
      dollar_error(sim_hdl, this, "s", &__str_literal_20);
    if (DEF_WILL_FIRE_RL_rl_state_2 && DEF_WILL_FIRE_RL_rl_state_13)
      dollar_error(sim_hdl, this, "s", &__str_literal_21);
    if (DEF_WILL_FIRE_RL_rl_state_2 && DEF_WILL_FIRE_RL_rl_state_12)
      dollar_error(sim_hdl, this, "s", &__str_literal_22);
    if (DEF_WILL_FIRE_RL_rl_state_2 && DEF_WILL_FIRE_RL_rl_state_11)
      dollar_error(sim_hdl, this, "s", &__str_literal_23);
    if (DEF_WILL_FIRE_RL_rl_state_2 && DEF_WILL_FIRE_RL_rl_state_10)
      dollar_error(sim_hdl, this, "s", &__str_literal_24);
    if (DEF_WILL_FIRE_RL_rl_state_2 && DEF_WILL_FIRE_RL_rl_state_9)
      dollar_error(sim_hdl, this, "s", &__str_literal_25);
    if (DEF_WILL_FIRE_RL_rl_state_2 && DEF_WILL_FIRE_RL_rl_state_8)
      dollar_error(sim_hdl, this, "s", &__str_literal_26);
    if (DEF_WILL_FIRE_RL_rl_state_2 && DEF_WILL_FIRE_RL_rl_state_7)
      dollar_error(sim_hdl, this, "s", &__str_literal_27);
    if (DEF_WILL_FIRE_RL_rl_state_2 && DEF_WILL_FIRE_RL_rl_state_6)
      dollar_error(sim_hdl, this, "s", &__str_literal_28);
    if (DEF_WILL_FIRE_RL_rl_state_2 && DEF_WILL_FIRE_RL_rl_state_5)
      dollar_error(sim_hdl, this, "s", &__str_literal_29);
    if (DEF_WILL_FIRE_RL_rl_state_2 && DEF_WILL_FIRE_RL_rl_state_4)
      dollar_error(sim_hdl, this, "s", &__str_literal_30);
    if (DEF_WILL_FIRE_RL_rl_state_2 && DEF_WILL_FIRE_RL_rl_state_3)
      dollar_error(sim_hdl, this, "s", &__str_literal_31);
  }
}

void MOD_mkJtag::__me_check_2()
{
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_WILL_FIRE_RL_rl_state_3 && DEF_WILL_FIRE_RL_rl_state_16)
      dollar_error(sim_hdl, this, "s", &__str_literal_32);
    if (DEF_WILL_FIRE_RL_rl_state_3 && DEF_WILL_FIRE_RL_rl_state_15)
      dollar_error(sim_hdl, this, "s", &__str_literal_33);
    if (DEF_WILL_FIRE_RL_rl_state_3 && DEF_WILL_FIRE_RL_rl_state_14)
      dollar_error(sim_hdl, this, "s", &__str_literal_34);
    if (DEF_WILL_FIRE_RL_rl_state_3 && DEF_WILL_FIRE_RL_rl_state_13)
      dollar_error(sim_hdl, this, "s", &__str_literal_35);
    if (DEF_WILL_FIRE_RL_rl_state_3 && DEF_WILL_FIRE_RL_rl_state_12)
      dollar_error(sim_hdl, this, "s", &__str_literal_36);
    if (DEF_WILL_FIRE_RL_rl_state_3 && DEF_WILL_FIRE_RL_rl_state_11)
      dollar_error(sim_hdl, this, "s", &__str_literal_37);
    if (DEF_WILL_FIRE_RL_rl_state_3 && DEF_WILL_FIRE_RL_rl_state_10)
      dollar_error(sim_hdl, this, "s", &__str_literal_38);
    if (DEF_WILL_FIRE_RL_rl_state_3 && DEF_WILL_FIRE_RL_rl_state_9)
      dollar_error(sim_hdl, this, "s", &__str_literal_39);
    if (DEF_WILL_FIRE_RL_rl_state_3 && DEF_WILL_FIRE_RL_rl_state_8)
      dollar_error(sim_hdl, this, "s", &__str_literal_40);
    if (DEF_WILL_FIRE_RL_rl_state_3 && DEF_WILL_FIRE_RL_rl_state_7)
      dollar_error(sim_hdl, this, "s", &__str_literal_41);
    if (DEF_WILL_FIRE_RL_rl_state_3 && DEF_WILL_FIRE_RL_rl_state_6)
      dollar_error(sim_hdl, this, "s", &__str_literal_42);
    if (DEF_WILL_FIRE_RL_rl_state_3 && DEF_WILL_FIRE_RL_rl_state_5)
      dollar_error(sim_hdl, this, "s", &__str_literal_43);
    if (DEF_WILL_FIRE_RL_rl_state_3 && DEF_WILL_FIRE_RL_rl_state_4)
      dollar_error(sim_hdl, this, "s", &__str_literal_44);
  }
}

void MOD_mkJtag::__me_check_3()
{
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_WILL_FIRE_RL_rl_state_4 && DEF_WILL_FIRE_RL_rl_state_16)
      dollar_error(sim_hdl, this, "s", &__str_literal_45);
    if (DEF_WILL_FIRE_RL_rl_state_4 && DEF_WILL_FIRE_RL_rl_state_15)
      dollar_error(sim_hdl, this, "s", &__str_literal_46);
    if (DEF_WILL_FIRE_RL_rl_state_4 && DEF_WILL_FIRE_RL_rl_state_14)
      dollar_error(sim_hdl, this, "s", &__str_literal_47);
    if (DEF_WILL_FIRE_RL_rl_state_4 && DEF_WILL_FIRE_RL_rl_state_13)
      dollar_error(sim_hdl, this, "s", &__str_literal_48);
    if (DEF_WILL_FIRE_RL_rl_state_4 && DEF_WILL_FIRE_RL_rl_state_12)
      dollar_error(sim_hdl, this, "s", &__str_literal_49);
    if (DEF_WILL_FIRE_RL_rl_state_4 && DEF_WILL_FIRE_RL_rl_state_11)
      dollar_error(sim_hdl, this, "s", &__str_literal_50);
    if (DEF_WILL_FIRE_RL_rl_state_4 && DEF_WILL_FIRE_RL_rl_state_10)
      dollar_error(sim_hdl, this, "s", &__str_literal_51);
    if (DEF_WILL_FIRE_RL_rl_state_4 && DEF_WILL_FIRE_RL_rl_state_9)
      dollar_error(sim_hdl, this, "s", &__str_literal_52);
    if (DEF_WILL_FIRE_RL_rl_state_4 && DEF_WILL_FIRE_RL_rl_state_8)
      dollar_error(sim_hdl, this, "s", &__str_literal_53);
    if (DEF_WILL_FIRE_RL_rl_state_4 && DEF_WILL_FIRE_RL_rl_state_7)
      dollar_error(sim_hdl, this, "s", &__str_literal_54);
    if (DEF_WILL_FIRE_RL_rl_state_4 && DEF_WILL_FIRE_RL_rl_state_6)
      dollar_error(sim_hdl, this, "s", &__str_literal_55);
    if (DEF_WILL_FIRE_RL_rl_state_4 && DEF_WILL_FIRE_RL_rl_state_5)
      dollar_error(sim_hdl, this, "s", &__str_literal_56);
  }
}

void MOD_mkJtag::__me_check_4()
{
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_WILL_FIRE_RL_rl_state_5 && DEF_WILL_FIRE_RL_rl_state_16)
      dollar_error(sim_hdl, this, "s", &__str_literal_57);
    if (DEF_WILL_FIRE_RL_rl_state_5 && DEF_WILL_FIRE_RL_rl_state_15)
      dollar_error(sim_hdl, this, "s", &__str_literal_58);
    if (DEF_WILL_FIRE_RL_rl_state_5 && DEF_WILL_FIRE_RL_rl_state_14)
      dollar_error(sim_hdl, this, "s", &__str_literal_59);
    if (DEF_WILL_FIRE_RL_rl_state_5 && DEF_WILL_FIRE_RL_rl_state_13)
      dollar_error(sim_hdl, this, "s", &__str_literal_60);
    if (DEF_WILL_FIRE_RL_rl_state_5 && DEF_WILL_FIRE_RL_rl_state_12)
      dollar_error(sim_hdl, this, "s", &__str_literal_61);
    if (DEF_WILL_FIRE_RL_rl_state_5 && DEF_WILL_FIRE_RL_rl_state_11)
      dollar_error(sim_hdl, this, "s", &__str_literal_62);
    if (DEF_WILL_FIRE_RL_rl_state_5 && DEF_WILL_FIRE_RL_rl_state_10)
      dollar_error(sim_hdl, this, "s", &__str_literal_63);
    if (DEF_WILL_FIRE_RL_rl_state_5 && DEF_WILL_FIRE_RL_rl_state_9)
      dollar_error(sim_hdl, this, "s", &__str_literal_64);
    if (DEF_WILL_FIRE_RL_rl_state_5 && DEF_WILL_FIRE_RL_rl_state_8)
      dollar_error(sim_hdl, this, "s", &__str_literal_65);
    if (DEF_WILL_FIRE_RL_rl_state_5 && DEF_WILL_FIRE_RL_rl_state_7)
      dollar_error(sim_hdl, this, "s", &__str_literal_66);
    if (DEF_WILL_FIRE_RL_rl_state_5 && DEF_WILL_FIRE_RL_rl_state_6)
      dollar_error(sim_hdl, this, "s", &__str_literal_67);
  }
}

void MOD_mkJtag::__me_check_5()
{
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_WILL_FIRE_RL_rl_state_6 && DEF_WILL_FIRE_RL_rl_state_16)
      dollar_error(sim_hdl, this, "s", &__str_literal_68);
    if (DEF_WILL_FIRE_RL_rl_state_6 && DEF_WILL_FIRE_RL_rl_state_15)
      dollar_error(sim_hdl, this, "s", &__str_literal_69);
    if (DEF_WILL_FIRE_RL_rl_state_6 && DEF_WILL_FIRE_RL_rl_state_14)
      dollar_error(sim_hdl, this, "s", &__str_literal_70);
    if (DEF_WILL_FIRE_RL_rl_state_6 && DEF_WILL_FIRE_RL_rl_state_13)
      dollar_error(sim_hdl, this, "s", &__str_literal_71);
    if (DEF_WILL_FIRE_RL_rl_state_6 && DEF_WILL_FIRE_RL_rl_state_12)
      dollar_error(sim_hdl, this, "s", &__str_literal_72);
    if (DEF_WILL_FIRE_RL_rl_state_6 && DEF_WILL_FIRE_RL_rl_state_11)
      dollar_error(sim_hdl, this, "s", &__str_literal_73);
    if (DEF_WILL_FIRE_RL_rl_state_6 && DEF_WILL_FIRE_RL_rl_state_10)
      dollar_error(sim_hdl, this, "s", &__str_literal_74);
    if (DEF_WILL_FIRE_RL_rl_state_6 && DEF_WILL_FIRE_RL_rl_state_9)
      dollar_error(sim_hdl, this, "s", &__str_literal_75);
    if (DEF_WILL_FIRE_RL_rl_state_6 && DEF_WILL_FIRE_RL_rl_state_8)
      dollar_error(sim_hdl, this, "s", &__str_literal_76);
    if (DEF_WILL_FIRE_RL_rl_state_6 && DEF_WILL_FIRE_RL_rl_state_7)
      dollar_error(sim_hdl, this, "s", &__str_literal_77);
  }
}

void MOD_mkJtag::__me_check_6()
{
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_WILL_FIRE_RL_rl_state_7 && DEF_WILL_FIRE_RL_rl_state_16)
      dollar_error(sim_hdl, this, "s", &__str_literal_78);
    if (DEF_WILL_FIRE_RL_rl_state_7 && DEF_WILL_FIRE_RL_rl_state_15)
      dollar_error(sim_hdl, this, "s", &__str_literal_79);
    if (DEF_WILL_FIRE_RL_rl_state_7 && DEF_WILL_FIRE_RL_rl_state_14)
      dollar_error(sim_hdl, this, "s", &__str_literal_80);
    if (DEF_WILL_FIRE_RL_rl_state_7 && DEF_WILL_FIRE_RL_rl_state_13)
      dollar_error(sim_hdl, this, "s", &__str_literal_81);
    if (DEF_WILL_FIRE_RL_rl_state_7 && DEF_WILL_FIRE_RL_rl_state_12)
      dollar_error(sim_hdl, this, "s", &__str_literal_82);
    if (DEF_WILL_FIRE_RL_rl_state_7 && DEF_WILL_FIRE_RL_rl_state_11)
      dollar_error(sim_hdl, this, "s", &__str_literal_83);
    if (DEF_WILL_FIRE_RL_rl_state_7 && DEF_WILL_FIRE_RL_rl_state_10)
      dollar_error(sim_hdl, this, "s", &__str_literal_84);
    if (DEF_WILL_FIRE_RL_rl_state_7 && DEF_WILL_FIRE_RL_rl_state_9)
      dollar_error(sim_hdl, this, "s", &__str_literal_85);
    if (DEF_WILL_FIRE_RL_rl_state_7 && DEF_WILL_FIRE_RL_rl_state_8)
      dollar_error(sim_hdl, this, "s", &__str_literal_86);
  }
}

void MOD_mkJtag::__me_check_7()
{
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_WILL_FIRE_RL_rl_state_8 && DEF_WILL_FIRE_RL_rl_state_16)
      dollar_error(sim_hdl, this, "s", &__str_literal_87);
    if (DEF_WILL_FIRE_RL_rl_state_8 && DEF_WILL_FIRE_RL_rl_state_15)
      dollar_error(sim_hdl, this, "s", &__str_literal_88);
    if (DEF_WILL_FIRE_RL_rl_state_8 && DEF_WILL_FIRE_RL_rl_state_14)
      dollar_error(sim_hdl, this, "s", &__str_literal_89);
    if (DEF_WILL_FIRE_RL_rl_state_8 && DEF_WILL_FIRE_RL_rl_state_13)
      dollar_error(sim_hdl, this, "s", &__str_literal_90);
    if (DEF_WILL_FIRE_RL_rl_state_8 && DEF_WILL_FIRE_RL_rl_state_12)
      dollar_error(sim_hdl, this, "s", &__str_literal_91);
    if (DEF_WILL_FIRE_RL_rl_state_8 && DEF_WILL_FIRE_RL_rl_state_11)
      dollar_error(sim_hdl, this, "s", &__str_literal_92);
    if (DEF_WILL_FIRE_RL_rl_state_8 && DEF_WILL_FIRE_RL_rl_state_10)
      dollar_error(sim_hdl, this, "s", &__str_literal_93);
    if (DEF_WILL_FIRE_RL_rl_state_8 && DEF_WILL_FIRE_RL_rl_state_9)
      dollar_error(sim_hdl, this, "s", &__str_literal_94);
  }
}

void MOD_mkJtag::__me_check_8()
{
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_WILL_FIRE_RL_rl_state_9 && DEF_WILL_FIRE_RL_rl_state_16)
      dollar_error(sim_hdl, this, "s", &__str_literal_95);
    if (DEF_WILL_FIRE_RL_rl_state_9 && DEF_WILL_FIRE_RL_rl_state_15)
      dollar_error(sim_hdl, this, "s", &__str_literal_96);
    if (DEF_WILL_FIRE_RL_rl_state_9 && DEF_WILL_FIRE_RL_rl_state_14)
      dollar_error(sim_hdl, this, "s", &__str_literal_97);
    if (DEF_WILL_FIRE_RL_rl_state_9 && DEF_WILL_FIRE_RL_rl_state_13)
      dollar_error(sim_hdl, this, "s", &__str_literal_98);
    if (DEF_WILL_FIRE_RL_rl_state_9 && DEF_WILL_FIRE_RL_rl_state_12)
      dollar_error(sim_hdl, this, "s", &__str_literal_99);
    if (DEF_WILL_FIRE_RL_rl_state_9 && DEF_WILL_FIRE_RL_rl_state_11)
      dollar_error(sim_hdl, this, "s", &__str_literal_100);
    if (DEF_WILL_FIRE_RL_rl_state_9 && DEF_WILL_FIRE_RL_rl_state_10)
      dollar_error(sim_hdl, this, "s", &__str_literal_101);
  }
}

void MOD_mkJtag::__me_check_9()
{
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_WILL_FIRE_RL_rl_state_10 && DEF_WILL_FIRE_RL_rl_state_16)
      dollar_error(sim_hdl, this, "s", &__str_literal_102);
    if (DEF_WILL_FIRE_RL_rl_state_10 && DEF_WILL_FIRE_RL_rl_state_15)
      dollar_error(sim_hdl, this, "s", &__str_literal_103);
    if (DEF_WILL_FIRE_RL_rl_state_10 && DEF_WILL_FIRE_RL_rl_state_14)
      dollar_error(sim_hdl, this, "s", &__str_literal_104);
    if (DEF_WILL_FIRE_RL_rl_state_10 && DEF_WILL_FIRE_RL_rl_state_13)
      dollar_error(sim_hdl, this, "s", &__str_literal_105);
    if (DEF_WILL_FIRE_RL_rl_state_10 && DEF_WILL_FIRE_RL_rl_state_12)
      dollar_error(sim_hdl, this, "s", &__str_literal_106);
    if (DEF_WILL_FIRE_RL_rl_state_10 && DEF_WILL_FIRE_RL_rl_state_11)
      dollar_error(sim_hdl, this, "s", &__str_literal_107);
  }
}

void MOD_mkJtag::__me_check_10()
{
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_WILL_FIRE_RL_rl_state_11 && DEF_WILL_FIRE_RL_rl_state_16)
      dollar_error(sim_hdl, this, "s", &__str_literal_108);
    if (DEF_WILL_FIRE_RL_rl_state_11 && DEF_WILL_FIRE_RL_rl_state_15)
      dollar_error(sim_hdl, this, "s", &__str_literal_109);
    if (DEF_WILL_FIRE_RL_rl_state_11 && DEF_WILL_FIRE_RL_rl_state_14)
      dollar_error(sim_hdl, this, "s", &__str_literal_110);
    if (DEF_WILL_FIRE_RL_rl_state_11 && DEF_WILL_FIRE_RL_rl_state_13)
      dollar_error(sim_hdl, this, "s", &__str_literal_111);
    if (DEF_WILL_FIRE_RL_rl_state_11 && DEF_WILL_FIRE_RL_rl_state_12)
      dollar_error(sim_hdl, this, "s", &__str_literal_112);
  }
}

void MOD_mkJtag::__me_check_11()
{
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_WILL_FIRE_RL_rl_state_12 && DEF_WILL_FIRE_RL_rl_state_16)
      dollar_error(sim_hdl, this, "s", &__str_literal_113);
    if (DEF_WILL_FIRE_RL_rl_state_12 && DEF_WILL_FIRE_RL_rl_state_15)
      dollar_error(sim_hdl, this, "s", &__str_literal_114);
    if (DEF_WILL_FIRE_RL_rl_state_12 && DEF_WILL_FIRE_RL_rl_state_14)
      dollar_error(sim_hdl, this, "s", &__str_literal_115);
    if (DEF_WILL_FIRE_RL_rl_state_12 && DEF_WILL_FIRE_RL_rl_state_13)
      dollar_error(sim_hdl, this, "s", &__str_literal_116);
  }
}

void MOD_mkJtag::__me_check_12()
{
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_WILL_FIRE_RL_rl_state_13 && DEF_WILL_FIRE_RL_rl_state_16)
      dollar_error(sim_hdl, this, "s", &__str_literal_117);
    if (DEF_WILL_FIRE_RL_rl_state_13 && DEF_WILL_FIRE_RL_rl_state_15)
      dollar_error(sim_hdl, this, "s", &__str_literal_118);
    if (DEF_WILL_FIRE_RL_rl_state_13 && DEF_WILL_FIRE_RL_rl_state_14)
      dollar_error(sim_hdl, this, "s", &__str_literal_119);
  }
}

void MOD_mkJtag::__me_check_13()
{
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_WILL_FIRE_RL_rl_state_14 && DEF_WILL_FIRE_RL_rl_state_16)
      dollar_error(sim_hdl, this, "s", &__str_literal_120);
    if (DEF_WILL_FIRE_RL_rl_state_14 && DEF_WILL_FIRE_RL_rl_state_15)
      dollar_error(sim_hdl, this, "s", &__str_literal_121);
  }
}

void MOD_mkJtag::__me_check_14()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_rl_state_15 && DEF_WILL_FIRE_RL_rl_state_16)
      dollar_error(sim_hdl, this, "s", &__str_literal_122);
}


/* Methods */


/* Reset routines */

void MOD_mkJtag::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_update_ir.reset_RST(ARG_rst_in);
  INST_update_dr.reset_RST(ARG_rst_in);
  INST_tms_vec.reset_RST(ARG_rst_in);
  INST_tms.reset_RST(ARG_rst_in);
  INST_test_logic_reset.reset_RST(ARG_rst_in);
  INST_tdi.reset_RST(ARG_rst_in);
  INST_shift_ir.reset_RST(ARG_rst_in);
  INST_shift_dr.reset_RST(ARG_rst_in);
  INST_select_ir_scan.reset_RST(ARG_rst_in);
  INST_select_dr_scan.reset_RST(ARG_rst_in);
  INST_sample_preload_select.reset_RST(ARG_rst_in);
  INST_run_test_idle.reset_RST(ARG_rst_in);
  INST_pause_ir.reset_RST(ARG_rst_in);
  INST_pause_dr.reset_RST(ARG_rst_in);
  INST_idcode_select.reset_RST(ARG_rst_in);
  INST_extest_select.reset_RST(ARG_rst_in);
  INST_exit2_ir.reset_RST(ARG_rst_in);
  INST_exit2_dr.reset_RST(ARG_rst_in);
  INST_exit1_ir.reset_RST(ARG_rst_in);
  INST_exit1_dr.reset_RST(ARG_rst_in);
  INST_debug_select.reset_RST(ARG_rst_in);
  INST_count.reset_RST(ARG_rst_in);
  INST_capture_ir.reset_RST(ARG_rst_in);
  INST_capture_dr.reset_RST(ARG_rst_in);
  INST_bypass_tdo.reset_RST(ARG_rst_in);
  INST_bypass_select.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkJtag::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}

void MOD_mkJtag::set_clk_1(char const *s)
{
  __clk_handle_1 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkJtag::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_bypass.dump_state(indent + 2u);
  INST_bypass_select.dump_state(indent + 2u);
  INST_bypass_tdo.dump_state(indent + 2u);
  INST_capture_dr.dump_state(indent + 2u);
  INST_capture_ir.dump_state(indent + 2u);
  INST_count.dump_state(indent + 2u);
  INST_debug_op.dump_state(indent + 2u);
  INST_debug_select.dump_state(indent + 2u);
  INST_exit1_dr.dump_state(indent + 2u);
  INST_exit1_ir.dump_state(indent + 2u);
  INST_exit2_dr.dump_state(indent + 2u);
  INST_exit2_ir.dump_state(indent + 2u);
  INST_extest_select.dump_state(indent + 2u);
  INST_idcode.dump_state(indent + 2u);
  INST_idcode_select.dump_state(indent + 2u);
  INST_idcode_tdo.dump_state(indent + 2u);
  INST_instr_tdo.dump_state(indent + 2u);
  INST_instruction.dump_state(indent + 2u);
  INST_instruction2.dump_state(indent + 2u);
  INST_instruction3.dump_state(indent + 2u);
  INST_inverted.dump_state(indent + 2u);
  INST_latch_ir.dump_state(indent + 2u);
  INST_latch_ir_neg.dump_state(indent + 2u);
  INST_pause_dr.dump_state(indent + 2u);
  INST_pause_ir.dump_state(indent + 2u);
  INST_run_test_idle.dump_state(indent + 2u);
  INST_sample_preload_select.dump_state(indent + 2u);
  INST_scan_chain_op.dump_state(indent + 2u);
  INST_select_dr_scan.dump_state(indent + 2u);
  INST_select_ir_scan.dump_state(indent + 2u);
  INST_shift_dr.dump_state(indent + 2u);
  INST_shift_ir.dump_state(indent + 2u);
  INST_shift_ir_neg.dump_state(indent + 2u);
  INST_tdi.dump_state(indent + 2u);
  INST_tdo.dump_state(indent + 2u);
  INST_tdo_enable.dump_state(indent + 2u);
  INST_test_logic_reset.dump_state(indent + 2u);
  INST_tms.dump_state(indent + 2u);
  INST_tms_vec.dump_state(indent + 2u);
  INST_update_dr.dump_state(indent + 2u);
  INST_update_ir.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkJtag::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 140u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_rl_assign_op", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_rl_bypass", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_rl_instruction", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_rl_latch_ir", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_rl_print_state", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_rl_process_instr", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_rl_state_1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_rl_state_10", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_rl_state_11", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_rl_state_12", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_rl_state_13", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_rl_state_14", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_rl_state_15", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_rl_state_16", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_rl_state_2", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_rl_state_3", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_rl_state_4", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_rl_state_5", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_rl_state_6", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_rl_state_7", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_rl_state_8", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_rl_state_9", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_rl_tp", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE___me_check_0", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE___me_check_1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE___me_check_10", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE___me_check_11", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE___me_check_12", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE___me_check_13", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE___me_check_14", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE___me_check_2", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE___me_check_3", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE___me_check_4", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE___me_check_5", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE___me_check_6", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE___me_check_7", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE___me_check_8", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE___me_check_9", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "NOT_tms___d3", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_rl_assign_op", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_rl_bypass", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_rl_instruction", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_rl_latch_ir", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_rl_print_state", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_rl_process_instr", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_rl_state_1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_rl_state_10", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_rl_state_11", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_rl_state_12", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_rl_state_13", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_rl_state_14", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_rl_state_15", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_rl_state_16", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_rl_state_2", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_rl_state_3", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_rl_state_4", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_rl_state_5", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_rl_state_6", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_rl_state_7", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_rl_state_8", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_rl_state_9", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_rl_tp", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE___me_check_0", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE___me_check_1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE___me_check_10", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE___me_check_11", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE___me_check_12", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE___me_check_13", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE___me_check_14", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE___me_check_2", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE___me_check_3", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE___me_check_4", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE___me_check_5", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE___me_check_6", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE___me_check_7", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE___me_check_8", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE___me_check_9", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "_read__h203", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "capture_dr___d7", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "capture_ir__h3447", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "exit1_dr___d11", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "exit1_ir___d12", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "exit2_dr___d16", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "exit2_ir___d15", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "i__h3513", 4u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "latch_ir___d36", 5u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "pause_dr___d13", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "pause_ir___d14", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "run_test_idle___d4", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "select_dr_scan___d5", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "select_ir_scan___d6", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "shift_dr__h3465", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "shift_ir__h3372", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "temp___1__h3483", 5u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "test_logic_reset__h3484", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "tms__h3231", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "update_dr___d17", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "update_ir__h3482", 1u);
  num = INST_bypass.dump_VCD_defs(num);
  num = INST_bypass_select.dump_VCD_defs(num);
  num = INST_bypass_tdo.dump_VCD_defs(num);
  num = INST_capture_dr.dump_VCD_defs(num);
  num = INST_capture_ir.dump_VCD_defs(num);
  num = INST_count.dump_VCD_defs(num);
  num = INST_debug_op.dump_VCD_defs(num);
  num = INST_debug_select.dump_VCD_defs(num);
  num = INST_exit1_dr.dump_VCD_defs(num);
  num = INST_exit1_ir.dump_VCD_defs(num);
  num = INST_exit2_dr.dump_VCD_defs(num);
  num = INST_exit2_ir.dump_VCD_defs(num);
  num = INST_extest_select.dump_VCD_defs(num);
  num = INST_idcode.dump_VCD_defs(num);
  num = INST_idcode_select.dump_VCD_defs(num);
  num = INST_idcode_tdo.dump_VCD_defs(num);
  num = INST_instr_tdo.dump_VCD_defs(num);
  num = INST_instruction.dump_VCD_defs(num);
  num = INST_instruction2.dump_VCD_defs(num);
  num = INST_instruction3.dump_VCD_defs(num);
  num = INST_inverted.dump_VCD_defs(num);
  num = INST_latch_ir.dump_VCD_defs(num);
  num = INST_latch_ir_neg.dump_VCD_defs(num);
  num = INST_pause_dr.dump_VCD_defs(num);
  num = INST_pause_ir.dump_VCD_defs(num);
  num = INST_run_test_idle.dump_VCD_defs(num);
  num = INST_sample_preload_select.dump_VCD_defs(num);
  num = INST_scan_chain_op.dump_VCD_defs(num);
  num = INST_select_dr_scan.dump_VCD_defs(num);
  num = INST_select_ir_scan.dump_VCD_defs(num);
  num = INST_shift_dr.dump_VCD_defs(num);
  num = INST_shift_ir.dump_VCD_defs(num);
  num = INST_shift_ir_neg.dump_VCD_defs(num);
  num = INST_tdi.dump_VCD_defs(num);
  num = INST_tdo.dump_VCD_defs(num);
  num = INST_tdo_enable.dump_VCD_defs(num);
  num = INST_test_logic_reset.dump_VCD_defs(num);
  num = INST_tms.dump_VCD_defs(num);
  num = INST_tms_vec.dump_VCD_defs(num);
  num = INST_update_dr.dump_VCD_defs(num);
  num = INST_update_ir.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkJtag::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkJtag &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkJtag::vcd_defs(tVCDDumpType dt, MOD_mkJtag &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 4u);
    vcd_write_x(sim_hdl, num++, 5u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 5u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_CAN_FIRE_RL_rl_assign_op) != DEF_CAN_FIRE_RL_rl_assign_op)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_rl_assign_op, 1u);
	backing.DEF_CAN_FIRE_RL_rl_assign_op = DEF_CAN_FIRE_RL_rl_assign_op;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_rl_bypass) != DEF_CAN_FIRE_RL_rl_bypass)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_rl_bypass, 1u);
	backing.DEF_CAN_FIRE_RL_rl_bypass = DEF_CAN_FIRE_RL_rl_bypass;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_rl_instruction) != DEF_CAN_FIRE_RL_rl_instruction)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_rl_instruction, 1u);
	backing.DEF_CAN_FIRE_RL_rl_instruction = DEF_CAN_FIRE_RL_rl_instruction;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_rl_latch_ir) != DEF_CAN_FIRE_RL_rl_latch_ir)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_rl_latch_ir, 1u);
	backing.DEF_CAN_FIRE_RL_rl_latch_ir = DEF_CAN_FIRE_RL_rl_latch_ir;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_rl_print_state) != DEF_CAN_FIRE_RL_rl_print_state)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_rl_print_state, 1u);
	backing.DEF_CAN_FIRE_RL_rl_print_state = DEF_CAN_FIRE_RL_rl_print_state;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_rl_process_instr) != DEF_CAN_FIRE_RL_rl_process_instr)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_rl_process_instr, 1u);
	backing.DEF_CAN_FIRE_RL_rl_process_instr = DEF_CAN_FIRE_RL_rl_process_instr;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_rl_state_1) != DEF_CAN_FIRE_RL_rl_state_1)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_rl_state_1, 1u);
	backing.DEF_CAN_FIRE_RL_rl_state_1 = DEF_CAN_FIRE_RL_rl_state_1;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_rl_state_10) != DEF_CAN_FIRE_RL_rl_state_10)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_rl_state_10, 1u);
	backing.DEF_CAN_FIRE_RL_rl_state_10 = DEF_CAN_FIRE_RL_rl_state_10;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_rl_state_11) != DEF_CAN_FIRE_RL_rl_state_11)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_rl_state_11, 1u);
	backing.DEF_CAN_FIRE_RL_rl_state_11 = DEF_CAN_FIRE_RL_rl_state_11;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_rl_state_12) != DEF_CAN_FIRE_RL_rl_state_12)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_rl_state_12, 1u);
	backing.DEF_CAN_FIRE_RL_rl_state_12 = DEF_CAN_FIRE_RL_rl_state_12;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_rl_state_13) != DEF_CAN_FIRE_RL_rl_state_13)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_rl_state_13, 1u);
	backing.DEF_CAN_FIRE_RL_rl_state_13 = DEF_CAN_FIRE_RL_rl_state_13;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_rl_state_14) != DEF_CAN_FIRE_RL_rl_state_14)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_rl_state_14, 1u);
	backing.DEF_CAN_FIRE_RL_rl_state_14 = DEF_CAN_FIRE_RL_rl_state_14;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_rl_state_15) != DEF_CAN_FIRE_RL_rl_state_15)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_rl_state_15, 1u);
	backing.DEF_CAN_FIRE_RL_rl_state_15 = DEF_CAN_FIRE_RL_rl_state_15;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_rl_state_16) != DEF_CAN_FIRE_RL_rl_state_16)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_rl_state_16, 1u);
	backing.DEF_CAN_FIRE_RL_rl_state_16 = DEF_CAN_FIRE_RL_rl_state_16;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_rl_state_2) != DEF_CAN_FIRE_RL_rl_state_2)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_rl_state_2, 1u);
	backing.DEF_CAN_FIRE_RL_rl_state_2 = DEF_CAN_FIRE_RL_rl_state_2;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_rl_state_3) != DEF_CAN_FIRE_RL_rl_state_3)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_rl_state_3, 1u);
	backing.DEF_CAN_FIRE_RL_rl_state_3 = DEF_CAN_FIRE_RL_rl_state_3;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_rl_state_4) != DEF_CAN_FIRE_RL_rl_state_4)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_rl_state_4, 1u);
	backing.DEF_CAN_FIRE_RL_rl_state_4 = DEF_CAN_FIRE_RL_rl_state_4;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_rl_state_5) != DEF_CAN_FIRE_RL_rl_state_5)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_rl_state_5, 1u);
	backing.DEF_CAN_FIRE_RL_rl_state_5 = DEF_CAN_FIRE_RL_rl_state_5;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_rl_state_6) != DEF_CAN_FIRE_RL_rl_state_6)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_rl_state_6, 1u);
	backing.DEF_CAN_FIRE_RL_rl_state_6 = DEF_CAN_FIRE_RL_rl_state_6;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_rl_state_7) != DEF_CAN_FIRE_RL_rl_state_7)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_rl_state_7, 1u);
	backing.DEF_CAN_FIRE_RL_rl_state_7 = DEF_CAN_FIRE_RL_rl_state_7;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_rl_state_8) != DEF_CAN_FIRE_RL_rl_state_8)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_rl_state_8, 1u);
	backing.DEF_CAN_FIRE_RL_rl_state_8 = DEF_CAN_FIRE_RL_rl_state_8;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_rl_state_9) != DEF_CAN_FIRE_RL_rl_state_9)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_rl_state_9, 1u);
	backing.DEF_CAN_FIRE_RL_rl_state_9 = DEF_CAN_FIRE_RL_rl_state_9;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_rl_tp) != DEF_CAN_FIRE_RL_rl_tp)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_rl_tp, 1u);
	backing.DEF_CAN_FIRE_RL_rl_tp = DEF_CAN_FIRE_RL_rl_tp;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE___me_check_0) != DEF_CAN_FIRE___me_check_0)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE___me_check_0, 1u);
	backing.DEF_CAN_FIRE___me_check_0 = DEF_CAN_FIRE___me_check_0;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE___me_check_1) != DEF_CAN_FIRE___me_check_1)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE___me_check_1, 1u);
	backing.DEF_CAN_FIRE___me_check_1 = DEF_CAN_FIRE___me_check_1;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE___me_check_10) != DEF_CAN_FIRE___me_check_10)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE___me_check_10, 1u);
	backing.DEF_CAN_FIRE___me_check_10 = DEF_CAN_FIRE___me_check_10;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE___me_check_11) != DEF_CAN_FIRE___me_check_11)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE___me_check_11, 1u);
	backing.DEF_CAN_FIRE___me_check_11 = DEF_CAN_FIRE___me_check_11;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE___me_check_12) != DEF_CAN_FIRE___me_check_12)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE___me_check_12, 1u);
	backing.DEF_CAN_FIRE___me_check_12 = DEF_CAN_FIRE___me_check_12;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE___me_check_13) != DEF_CAN_FIRE___me_check_13)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE___me_check_13, 1u);
	backing.DEF_CAN_FIRE___me_check_13 = DEF_CAN_FIRE___me_check_13;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE___me_check_14) != DEF_CAN_FIRE___me_check_14)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE___me_check_14, 1u);
	backing.DEF_CAN_FIRE___me_check_14 = DEF_CAN_FIRE___me_check_14;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE___me_check_2) != DEF_CAN_FIRE___me_check_2)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE___me_check_2, 1u);
	backing.DEF_CAN_FIRE___me_check_2 = DEF_CAN_FIRE___me_check_2;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE___me_check_3) != DEF_CAN_FIRE___me_check_3)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE___me_check_3, 1u);
	backing.DEF_CAN_FIRE___me_check_3 = DEF_CAN_FIRE___me_check_3;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE___me_check_4) != DEF_CAN_FIRE___me_check_4)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE___me_check_4, 1u);
	backing.DEF_CAN_FIRE___me_check_4 = DEF_CAN_FIRE___me_check_4;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE___me_check_5) != DEF_CAN_FIRE___me_check_5)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE___me_check_5, 1u);
	backing.DEF_CAN_FIRE___me_check_5 = DEF_CAN_FIRE___me_check_5;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE___me_check_6) != DEF_CAN_FIRE___me_check_6)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE___me_check_6, 1u);
	backing.DEF_CAN_FIRE___me_check_6 = DEF_CAN_FIRE___me_check_6;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE___me_check_7) != DEF_CAN_FIRE___me_check_7)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE___me_check_7, 1u);
	backing.DEF_CAN_FIRE___me_check_7 = DEF_CAN_FIRE___me_check_7;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE___me_check_8) != DEF_CAN_FIRE___me_check_8)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE___me_check_8, 1u);
	backing.DEF_CAN_FIRE___me_check_8 = DEF_CAN_FIRE___me_check_8;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE___me_check_9) != DEF_CAN_FIRE___me_check_9)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE___me_check_9, 1u);
	backing.DEF_CAN_FIRE___me_check_9 = DEF_CAN_FIRE___me_check_9;
      }
      ++num;
      if ((backing.DEF_NOT_tms___d3) != DEF_NOT_tms___d3)
      {
	vcd_write_val(sim_hdl, num, DEF_NOT_tms___d3, 1u);
	backing.DEF_NOT_tms___d3 = DEF_NOT_tms___d3;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_rl_assign_op) != DEF_WILL_FIRE_RL_rl_assign_op)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_rl_assign_op, 1u);
	backing.DEF_WILL_FIRE_RL_rl_assign_op = DEF_WILL_FIRE_RL_rl_assign_op;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_rl_bypass) != DEF_WILL_FIRE_RL_rl_bypass)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_rl_bypass, 1u);
	backing.DEF_WILL_FIRE_RL_rl_bypass = DEF_WILL_FIRE_RL_rl_bypass;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_rl_instruction) != DEF_WILL_FIRE_RL_rl_instruction)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_rl_instruction, 1u);
	backing.DEF_WILL_FIRE_RL_rl_instruction = DEF_WILL_FIRE_RL_rl_instruction;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_rl_latch_ir) != DEF_WILL_FIRE_RL_rl_latch_ir)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_rl_latch_ir, 1u);
	backing.DEF_WILL_FIRE_RL_rl_latch_ir = DEF_WILL_FIRE_RL_rl_latch_ir;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_rl_print_state) != DEF_WILL_FIRE_RL_rl_print_state)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_rl_print_state, 1u);
	backing.DEF_WILL_FIRE_RL_rl_print_state = DEF_WILL_FIRE_RL_rl_print_state;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_rl_process_instr) != DEF_WILL_FIRE_RL_rl_process_instr)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_rl_process_instr, 1u);
	backing.DEF_WILL_FIRE_RL_rl_process_instr = DEF_WILL_FIRE_RL_rl_process_instr;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_rl_state_1) != DEF_WILL_FIRE_RL_rl_state_1)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_rl_state_1, 1u);
	backing.DEF_WILL_FIRE_RL_rl_state_1 = DEF_WILL_FIRE_RL_rl_state_1;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_rl_state_10) != DEF_WILL_FIRE_RL_rl_state_10)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_rl_state_10, 1u);
	backing.DEF_WILL_FIRE_RL_rl_state_10 = DEF_WILL_FIRE_RL_rl_state_10;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_rl_state_11) != DEF_WILL_FIRE_RL_rl_state_11)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_rl_state_11, 1u);
	backing.DEF_WILL_FIRE_RL_rl_state_11 = DEF_WILL_FIRE_RL_rl_state_11;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_rl_state_12) != DEF_WILL_FIRE_RL_rl_state_12)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_rl_state_12, 1u);
	backing.DEF_WILL_FIRE_RL_rl_state_12 = DEF_WILL_FIRE_RL_rl_state_12;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_rl_state_13) != DEF_WILL_FIRE_RL_rl_state_13)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_rl_state_13, 1u);
	backing.DEF_WILL_FIRE_RL_rl_state_13 = DEF_WILL_FIRE_RL_rl_state_13;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_rl_state_14) != DEF_WILL_FIRE_RL_rl_state_14)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_rl_state_14, 1u);
	backing.DEF_WILL_FIRE_RL_rl_state_14 = DEF_WILL_FIRE_RL_rl_state_14;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_rl_state_15) != DEF_WILL_FIRE_RL_rl_state_15)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_rl_state_15, 1u);
	backing.DEF_WILL_FIRE_RL_rl_state_15 = DEF_WILL_FIRE_RL_rl_state_15;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_rl_state_16) != DEF_WILL_FIRE_RL_rl_state_16)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_rl_state_16, 1u);
	backing.DEF_WILL_FIRE_RL_rl_state_16 = DEF_WILL_FIRE_RL_rl_state_16;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_rl_state_2) != DEF_WILL_FIRE_RL_rl_state_2)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_rl_state_2, 1u);
	backing.DEF_WILL_FIRE_RL_rl_state_2 = DEF_WILL_FIRE_RL_rl_state_2;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_rl_state_3) != DEF_WILL_FIRE_RL_rl_state_3)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_rl_state_3, 1u);
	backing.DEF_WILL_FIRE_RL_rl_state_3 = DEF_WILL_FIRE_RL_rl_state_3;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_rl_state_4) != DEF_WILL_FIRE_RL_rl_state_4)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_rl_state_4, 1u);
	backing.DEF_WILL_FIRE_RL_rl_state_4 = DEF_WILL_FIRE_RL_rl_state_4;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_rl_state_5) != DEF_WILL_FIRE_RL_rl_state_5)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_rl_state_5, 1u);
	backing.DEF_WILL_FIRE_RL_rl_state_5 = DEF_WILL_FIRE_RL_rl_state_5;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_rl_state_6) != DEF_WILL_FIRE_RL_rl_state_6)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_rl_state_6, 1u);
	backing.DEF_WILL_FIRE_RL_rl_state_6 = DEF_WILL_FIRE_RL_rl_state_6;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_rl_state_7) != DEF_WILL_FIRE_RL_rl_state_7)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_rl_state_7, 1u);
	backing.DEF_WILL_FIRE_RL_rl_state_7 = DEF_WILL_FIRE_RL_rl_state_7;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_rl_state_8) != DEF_WILL_FIRE_RL_rl_state_8)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_rl_state_8, 1u);
	backing.DEF_WILL_FIRE_RL_rl_state_8 = DEF_WILL_FIRE_RL_rl_state_8;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_rl_state_9) != DEF_WILL_FIRE_RL_rl_state_9)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_rl_state_9, 1u);
	backing.DEF_WILL_FIRE_RL_rl_state_9 = DEF_WILL_FIRE_RL_rl_state_9;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_rl_tp) != DEF_WILL_FIRE_RL_rl_tp)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_rl_tp, 1u);
	backing.DEF_WILL_FIRE_RL_rl_tp = DEF_WILL_FIRE_RL_rl_tp;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE___me_check_0) != DEF_WILL_FIRE___me_check_0)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE___me_check_0, 1u);
	backing.DEF_WILL_FIRE___me_check_0 = DEF_WILL_FIRE___me_check_0;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE___me_check_1) != DEF_WILL_FIRE___me_check_1)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE___me_check_1, 1u);
	backing.DEF_WILL_FIRE___me_check_1 = DEF_WILL_FIRE___me_check_1;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE___me_check_10) != DEF_WILL_FIRE___me_check_10)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE___me_check_10, 1u);
	backing.DEF_WILL_FIRE___me_check_10 = DEF_WILL_FIRE___me_check_10;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE___me_check_11) != DEF_WILL_FIRE___me_check_11)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE___me_check_11, 1u);
	backing.DEF_WILL_FIRE___me_check_11 = DEF_WILL_FIRE___me_check_11;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE___me_check_12) != DEF_WILL_FIRE___me_check_12)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE___me_check_12, 1u);
	backing.DEF_WILL_FIRE___me_check_12 = DEF_WILL_FIRE___me_check_12;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE___me_check_13) != DEF_WILL_FIRE___me_check_13)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE___me_check_13, 1u);
	backing.DEF_WILL_FIRE___me_check_13 = DEF_WILL_FIRE___me_check_13;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE___me_check_14) != DEF_WILL_FIRE___me_check_14)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE___me_check_14, 1u);
	backing.DEF_WILL_FIRE___me_check_14 = DEF_WILL_FIRE___me_check_14;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE___me_check_2) != DEF_WILL_FIRE___me_check_2)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE___me_check_2, 1u);
	backing.DEF_WILL_FIRE___me_check_2 = DEF_WILL_FIRE___me_check_2;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE___me_check_3) != DEF_WILL_FIRE___me_check_3)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE___me_check_3, 1u);
	backing.DEF_WILL_FIRE___me_check_3 = DEF_WILL_FIRE___me_check_3;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE___me_check_4) != DEF_WILL_FIRE___me_check_4)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE___me_check_4, 1u);
	backing.DEF_WILL_FIRE___me_check_4 = DEF_WILL_FIRE___me_check_4;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE___me_check_5) != DEF_WILL_FIRE___me_check_5)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE___me_check_5, 1u);
	backing.DEF_WILL_FIRE___me_check_5 = DEF_WILL_FIRE___me_check_5;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE___me_check_6) != DEF_WILL_FIRE___me_check_6)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE___me_check_6, 1u);
	backing.DEF_WILL_FIRE___me_check_6 = DEF_WILL_FIRE___me_check_6;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE___me_check_7) != DEF_WILL_FIRE___me_check_7)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE___me_check_7, 1u);
	backing.DEF_WILL_FIRE___me_check_7 = DEF_WILL_FIRE___me_check_7;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE___me_check_8) != DEF_WILL_FIRE___me_check_8)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE___me_check_8, 1u);
	backing.DEF_WILL_FIRE___me_check_8 = DEF_WILL_FIRE___me_check_8;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE___me_check_9) != DEF_WILL_FIRE___me_check_9)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE___me_check_9, 1u);
	backing.DEF_WILL_FIRE___me_check_9 = DEF_WILL_FIRE___me_check_9;
      }
      ++num;
      if ((backing.DEF__read__h203) != DEF__read__h203)
      {
	vcd_write_val(sim_hdl, num, DEF__read__h203, 1u);
	backing.DEF__read__h203 = DEF__read__h203;
      }
      ++num;
      if ((backing.DEF_capture_dr___d7) != DEF_capture_dr___d7)
      {
	vcd_write_val(sim_hdl, num, DEF_capture_dr___d7, 1u);
	backing.DEF_capture_dr___d7 = DEF_capture_dr___d7;
      }
      ++num;
      if ((backing.DEF_capture_ir__h3447) != DEF_capture_ir__h3447)
      {
	vcd_write_val(sim_hdl, num, DEF_capture_ir__h3447, 1u);
	backing.DEF_capture_ir__h3447 = DEF_capture_ir__h3447;
      }
      ++num;
      if ((backing.DEF_exit1_dr___d11) != DEF_exit1_dr___d11)
      {
	vcd_write_val(sim_hdl, num, DEF_exit1_dr___d11, 1u);
	backing.DEF_exit1_dr___d11 = DEF_exit1_dr___d11;
      }
      ++num;
      if ((backing.DEF_exit1_ir___d12) != DEF_exit1_ir___d12)
      {
	vcd_write_val(sim_hdl, num, DEF_exit1_ir___d12, 1u);
	backing.DEF_exit1_ir___d12 = DEF_exit1_ir___d12;
      }
      ++num;
      if ((backing.DEF_exit2_dr___d16) != DEF_exit2_dr___d16)
      {
	vcd_write_val(sim_hdl, num, DEF_exit2_dr___d16, 1u);
	backing.DEF_exit2_dr___d16 = DEF_exit2_dr___d16;
      }
      ++num;
      if ((backing.DEF_exit2_ir___d15) != DEF_exit2_ir___d15)
      {
	vcd_write_val(sim_hdl, num, DEF_exit2_ir___d15, 1u);
	backing.DEF_exit2_ir___d15 = DEF_exit2_ir___d15;
      }
      ++num;
      if ((backing.DEF_i__h3513) != DEF_i__h3513)
      {
	vcd_write_val(sim_hdl, num, DEF_i__h3513, 4u);
	backing.DEF_i__h3513 = DEF_i__h3513;
      }
      ++num;
      if ((backing.DEF_latch_ir___d36) != DEF_latch_ir___d36)
      {
	vcd_write_val(sim_hdl, num, DEF_latch_ir___d36, 5u);
	backing.DEF_latch_ir___d36 = DEF_latch_ir___d36;
      }
      ++num;
      if ((backing.DEF_pause_dr___d13) != DEF_pause_dr___d13)
      {
	vcd_write_val(sim_hdl, num, DEF_pause_dr___d13, 1u);
	backing.DEF_pause_dr___d13 = DEF_pause_dr___d13;
      }
      ++num;
      if ((backing.DEF_pause_ir___d14) != DEF_pause_ir___d14)
      {
	vcd_write_val(sim_hdl, num, DEF_pause_ir___d14, 1u);
	backing.DEF_pause_ir___d14 = DEF_pause_ir___d14;
      }
      ++num;
      if ((backing.DEF_run_test_idle___d4) != DEF_run_test_idle___d4)
      {
	vcd_write_val(sim_hdl, num, DEF_run_test_idle___d4, 1u);
	backing.DEF_run_test_idle___d4 = DEF_run_test_idle___d4;
      }
      ++num;
      if ((backing.DEF_select_dr_scan___d5) != DEF_select_dr_scan___d5)
      {
	vcd_write_val(sim_hdl, num, DEF_select_dr_scan___d5, 1u);
	backing.DEF_select_dr_scan___d5 = DEF_select_dr_scan___d5;
      }
      ++num;
      if ((backing.DEF_select_ir_scan___d6) != DEF_select_ir_scan___d6)
      {
	vcd_write_val(sim_hdl, num, DEF_select_ir_scan___d6, 1u);
	backing.DEF_select_ir_scan___d6 = DEF_select_ir_scan___d6;
      }
      ++num;
      if ((backing.DEF_shift_dr__h3465) != DEF_shift_dr__h3465)
      {
	vcd_write_val(sim_hdl, num, DEF_shift_dr__h3465, 1u);
	backing.DEF_shift_dr__h3465 = DEF_shift_dr__h3465;
      }
      ++num;
      if ((backing.DEF_shift_ir__h3372) != DEF_shift_ir__h3372)
      {
	vcd_write_val(sim_hdl, num, DEF_shift_ir__h3372, 1u);
	backing.DEF_shift_ir__h3372 = DEF_shift_ir__h3372;
      }
      ++num;
      if ((backing.DEF_temp___1__h3483) != DEF_temp___1__h3483)
      {
	vcd_write_val(sim_hdl, num, DEF_temp___1__h3483, 5u);
	backing.DEF_temp___1__h3483 = DEF_temp___1__h3483;
      }
      ++num;
      if ((backing.DEF_test_logic_reset__h3484) != DEF_test_logic_reset__h3484)
      {
	vcd_write_val(sim_hdl, num, DEF_test_logic_reset__h3484, 1u);
	backing.DEF_test_logic_reset__h3484 = DEF_test_logic_reset__h3484;
      }
      ++num;
      if ((backing.DEF_tms__h3231) != DEF_tms__h3231)
      {
	vcd_write_val(sim_hdl, num, DEF_tms__h3231, 1u);
	backing.DEF_tms__h3231 = DEF_tms__h3231;
      }
      ++num;
      if ((backing.DEF_update_dr___d17) != DEF_update_dr___d17)
      {
	vcd_write_val(sim_hdl, num, DEF_update_dr___d17, 1u);
	backing.DEF_update_dr___d17 = DEF_update_dr___d17;
      }
      ++num;
      if ((backing.DEF_update_ir__h3482) != DEF_update_ir__h3482)
      {
	vcd_write_val(sim_hdl, num, DEF_update_ir__h3482, 1u);
	backing.DEF_update_ir__h3482 = DEF_update_ir__h3482;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_rl_assign_op, 1u);
      backing.DEF_CAN_FIRE_RL_rl_assign_op = DEF_CAN_FIRE_RL_rl_assign_op;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_rl_bypass, 1u);
      backing.DEF_CAN_FIRE_RL_rl_bypass = DEF_CAN_FIRE_RL_rl_bypass;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_rl_instruction, 1u);
      backing.DEF_CAN_FIRE_RL_rl_instruction = DEF_CAN_FIRE_RL_rl_instruction;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_rl_latch_ir, 1u);
      backing.DEF_CAN_FIRE_RL_rl_latch_ir = DEF_CAN_FIRE_RL_rl_latch_ir;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_rl_print_state, 1u);
      backing.DEF_CAN_FIRE_RL_rl_print_state = DEF_CAN_FIRE_RL_rl_print_state;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_rl_process_instr, 1u);
      backing.DEF_CAN_FIRE_RL_rl_process_instr = DEF_CAN_FIRE_RL_rl_process_instr;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_rl_state_1, 1u);
      backing.DEF_CAN_FIRE_RL_rl_state_1 = DEF_CAN_FIRE_RL_rl_state_1;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_rl_state_10, 1u);
      backing.DEF_CAN_FIRE_RL_rl_state_10 = DEF_CAN_FIRE_RL_rl_state_10;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_rl_state_11, 1u);
      backing.DEF_CAN_FIRE_RL_rl_state_11 = DEF_CAN_FIRE_RL_rl_state_11;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_rl_state_12, 1u);
      backing.DEF_CAN_FIRE_RL_rl_state_12 = DEF_CAN_FIRE_RL_rl_state_12;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_rl_state_13, 1u);
      backing.DEF_CAN_FIRE_RL_rl_state_13 = DEF_CAN_FIRE_RL_rl_state_13;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_rl_state_14, 1u);
      backing.DEF_CAN_FIRE_RL_rl_state_14 = DEF_CAN_FIRE_RL_rl_state_14;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_rl_state_15, 1u);
      backing.DEF_CAN_FIRE_RL_rl_state_15 = DEF_CAN_FIRE_RL_rl_state_15;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_rl_state_16, 1u);
      backing.DEF_CAN_FIRE_RL_rl_state_16 = DEF_CAN_FIRE_RL_rl_state_16;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_rl_state_2, 1u);
      backing.DEF_CAN_FIRE_RL_rl_state_2 = DEF_CAN_FIRE_RL_rl_state_2;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_rl_state_3, 1u);
      backing.DEF_CAN_FIRE_RL_rl_state_3 = DEF_CAN_FIRE_RL_rl_state_3;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_rl_state_4, 1u);
      backing.DEF_CAN_FIRE_RL_rl_state_4 = DEF_CAN_FIRE_RL_rl_state_4;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_rl_state_5, 1u);
      backing.DEF_CAN_FIRE_RL_rl_state_5 = DEF_CAN_FIRE_RL_rl_state_5;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_rl_state_6, 1u);
      backing.DEF_CAN_FIRE_RL_rl_state_6 = DEF_CAN_FIRE_RL_rl_state_6;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_rl_state_7, 1u);
      backing.DEF_CAN_FIRE_RL_rl_state_7 = DEF_CAN_FIRE_RL_rl_state_7;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_rl_state_8, 1u);
      backing.DEF_CAN_FIRE_RL_rl_state_8 = DEF_CAN_FIRE_RL_rl_state_8;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_rl_state_9, 1u);
      backing.DEF_CAN_FIRE_RL_rl_state_9 = DEF_CAN_FIRE_RL_rl_state_9;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_rl_tp, 1u);
      backing.DEF_CAN_FIRE_RL_rl_tp = DEF_CAN_FIRE_RL_rl_tp;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE___me_check_0, 1u);
      backing.DEF_CAN_FIRE___me_check_0 = DEF_CAN_FIRE___me_check_0;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE___me_check_1, 1u);
      backing.DEF_CAN_FIRE___me_check_1 = DEF_CAN_FIRE___me_check_1;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE___me_check_10, 1u);
      backing.DEF_CAN_FIRE___me_check_10 = DEF_CAN_FIRE___me_check_10;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE___me_check_11, 1u);
      backing.DEF_CAN_FIRE___me_check_11 = DEF_CAN_FIRE___me_check_11;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE___me_check_12, 1u);
      backing.DEF_CAN_FIRE___me_check_12 = DEF_CAN_FIRE___me_check_12;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE___me_check_13, 1u);
      backing.DEF_CAN_FIRE___me_check_13 = DEF_CAN_FIRE___me_check_13;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE___me_check_14, 1u);
      backing.DEF_CAN_FIRE___me_check_14 = DEF_CAN_FIRE___me_check_14;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE___me_check_2, 1u);
      backing.DEF_CAN_FIRE___me_check_2 = DEF_CAN_FIRE___me_check_2;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE___me_check_3, 1u);
      backing.DEF_CAN_FIRE___me_check_3 = DEF_CAN_FIRE___me_check_3;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE___me_check_4, 1u);
      backing.DEF_CAN_FIRE___me_check_4 = DEF_CAN_FIRE___me_check_4;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE___me_check_5, 1u);
      backing.DEF_CAN_FIRE___me_check_5 = DEF_CAN_FIRE___me_check_5;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE___me_check_6, 1u);
      backing.DEF_CAN_FIRE___me_check_6 = DEF_CAN_FIRE___me_check_6;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE___me_check_7, 1u);
      backing.DEF_CAN_FIRE___me_check_7 = DEF_CAN_FIRE___me_check_7;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE___me_check_8, 1u);
      backing.DEF_CAN_FIRE___me_check_8 = DEF_CAN_FIRE___me_check_8;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE___me_check_9, 1u);
      backing.DEF_CAN_FIRE___me_check_9 = DEF_CAN_FIRE___me_check_9;
      vcd_write_val(sim_hdl, num++, DEF_NOT_tms___d3, 1u);
      backing.DEF_NOT_tms___d3 = DEF_NOT_tms___d3;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_rl_assign_op, 1u);
      backing.DEF_WILL_FIRE_RL_rl_assign_op = DEF_WILL_FIRE_RL_rl_assign_op;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_rl_bypass, 1u);
      backing.DEF_WILL_FIRE_RL_rl_bypass = DEF_WILL_FIRE_RL_rl_bypass;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_rl_instruction, 1u);
      backing.DEF_WILL_FIRE_RL_rl_instruction = DEF_WILL_FIRE_RL_rl_instruction;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_rl_latch_ir, 1u);
      backing.DEF_WILL_FIRE_RL_rl_latch_ir = DEF_WILL_FIRE_RL_rl_latch_ir;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_rl_print_state, 1u);
      backing.DEF_WILL_FIRE_RL_rl_print_state = DEF_WILL_FIRE_RL_rl_print_state;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_rl_process_instr, 1u);
      backing.DEF_WILL_FIRE_RL_rl_process_instr = DEF_WILL_FIRE_RL_rl_process_instr;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_rl_state_1, 1u);
      backing.DEF_WILL_FIRE_RL_rl_state_1 = DEF_WILL_FIRE_RL_rl_state_1;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_rl_state_10, 1u);
      backing.DEF_WILL_FIRE_RL_rl_state_10 = DEF_WILL_FIRE_RL_rl_state_10;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_rl_state_11, 1u);
      backing.DEF_WILL_FIRE_RL_rl_state_11 = DEF_WILL_FIRE_RL_rl_state_11;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_rl_state_12, 1u);
      backing.DEF_WILL_FIRE_RL_rl_state_12 = DEF_WILL_FIRE_RL_rl_state_12;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_rl_state_13, 1u);
      backing.DEF_WILL_FIRE_RL_rl_state_13 = DEF_WILL_FIRE_RL_rl_state_13;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_rl_state_14, 1u);
      backing.DEF_WILL_FIRE_RL_rl_state_14 = DEF_WILL_FIRE_RL_rl_state_14;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_rl_state_15, 1u);
      backing.DEF_WILL_FIRE_RL_rl_state_15 = DEF_WILL_FIRE_RL_rl_state_15;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_rl_state_16, 1u);
      backing.DEF_WILL_FIRE_RL_rl_state_16 = DEF_WILL_FIRE_RL_rl_state_16;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_rl_state_2, 1u);
      backing.DEF_WILL_FIRE_RL_rl_state_2 = DEF_WILL_FIRE_RL_rl_state_2;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_rl_state_3, 1u);
      backing.DEF_WILL_FIRE_RL_rl_state_3 = DEF_WILL_FIRE_RL_rl_state_3;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_rl_state_4, 1u);
      backing.DEF_WILL_FIRE_RL_rl_state_4 = DEF_WILL_FIRE_RL_rl_state_4;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_rl_state_5, 1u);
      backing.DEF_WILL_FIRE_RL_rl_state_5 = DEF_WILL_FIRE_RL_rl_state_5;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_rl_state_6, 1u);
      backing.DEF_WILL_FIRE_RL_rl_state_6 = DEF_WILL_FIRE_RL_rl_state_6;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_rl_state_7, 1u);
      backing.DEF_WILL_FIRE_RL_rl_state_7 = DEF_WILL_FIRE_RL_rl_state_7;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_rl_state_8, 1u);
      backing.DEF_WILL_FIRE_RL_rl_state_8 = DEF_WILL_FIRE_RL_rl_state_8;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_rl_state_9, 1u);
      backing.DEF_WILL_FIRE_RL_rl_state_9 = DEF_WILL_FIRE_RL_rl_state_9;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_rl_tp, 1u);
      backing.DEF_WILL_FIRE_RL_rl_tp = DEF_WILL_FIRE_RL_rl_tp;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE___me_check_0, 1u);
      backing.DEF_WILL_FIRE___me_check_0 = DEF_WILL_FIRE___me_check_0;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE___me_check_1, 1u);
      backing.DEF_WILL_FIRE___me_check_1 = DEF_WILL_FIRE___me_check_1;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE___me_check_10, 1u);
      backing.DEF_WILL_FIRE___me_check_10 = DEF_WILL_FIRE___me_check_10;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE___me_check_11, 1u);
      backing.DEF_WILL_FIRE___me_check_11 = DEF_WILL_FIRE___me_check_11;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE___me_check_12, 1u);
      backing.DEF_WILL_FIRE___me_check_12 = DEF_WILL_FIRE___me_check_12;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE___me_check_13, 1u);
      backing.DEF_WILL_FIRE___me_check_13 = DEF_WILL_FIRE___me_check_13;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE___me_check_14, 1u);
      backing.DEF_WILL_FIRE___me_check_14 = DEF_WILL_FIRE___me_check_14;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE___me_check_2, 1u);
      backing.DEF_WILL_FIRE___me_check_2 = DEF_WILL_FIRE___me_check_2;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE___me_check_3, 1u);
      backing.DEF_WILL_FIRE___me_check_3 = DEF_WILL_FIRE___me_check_3;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE___me_check_4, 1u);
      backing.DEF_WILL_FIRE___me_check_4 = DEF_WILL_FIRE___me_check_4;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE___me_check_5, 1u);
      backing.DEF_WILL_FIRE___me_check_5 = DEF_WILL_FIRE___me_check_5;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE___me_check_6, 1u);
      backing.DEF_WILL_FIRE___me_check_6 = DEF_WILL_FIRE___me_check_6;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE___me_check_7, 1u);
      backing.DEF_WILL_FIRE___me_check_7 = DEF_WILL_FIRE___me_check_7;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE___me_check_8, 1u);
      backing.DEF_WILL_FIRE___me_check_8 = DEF_WILL_FIRE___me_check_8;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE___me_check_9, 1u);
      backing.DEF_WILL_FIRE___me_check_9 = DEF_WILL_FIRE___me_check_9;
      vcd_write_val(sim_hdl, num++, DEF__read__h203, 1u);
      backing.DEF__read__h203 = DEF__read__h203;
      vcd_write_val(sim_hdl, num++, DEF_capture_dr___d7, 1u);
      backing.DEF_capture_dr___d7 = DEF_capture_dr___d7;
      vcd_write_val(sim_hdl, num++, DEF_capture_ir__h3447, 1u);
      backing.DEF_capture_ir__h3447 = DEF_capture_ir__h3447;
      vcd_write_val(sim_hdl, num++, DEF_exit1_dr___d11, 1u);
      backing.DEF_exit1_dr___d11 = DEF_exit1_dr___d11;
      vcd_write_val(sim_hdl, num++, DEF_exit1_ir___d12, 1u);
      backing.DEF_exit1_ir___d12 = DEF_exit1_ir___d12;
      vcd_write_val(sim_hdl, num++, DEF_exit2_dr___d16, 1u);
      backing.DEF_exit2_dr___d16 = DEF_exit2_dr___d16;
      vcd_write_val(sim_hdl, num++, DEF_exit2_ir___d15, 1u);
      backing.DEF_exit2_ir___d15 = DEF_exit2_ir___d15;
      vcd_write_val(sim_hdl, num++, DEF_i__h3513, 4u);
      backing.DEF_i__h3513 = DEF_i__h3513;
      vcd_write_val(sim_hdl, num++, DEF_latch_ir___d36, 5u);
      backing.DEF_latch_ir___d36 = DEF_latch_ir___d36;
      vcd_write_val(sim_hdl, num++, DEF_pause_dr___d13, 1u);
      backing.DEF_pause_dr___d13 = DEF_pause_dr___d13;
      vcd_write_val(sim_hdl, num++, DEF_pause_ir___d14, 1u);
      backing.DEF_pause_ir___d14 = DEF_pause_ir___d14;
      vcd_write_val(sim_hdl, num++, DEF_run_test_idle___d4, 1u);
      backing.DEF_run_test_idle___d4 = DEF_run_test_idle___d4;
      vcd_write_val(sim_hdl, num++, DEF_select_dr_scan___d5, 1u);
      backing.DEF_select_dr_scan___d5 = DEF_select_dr_scan___d5;
      vcd_write_val(sim_hdl, num++, DEF_select_ir_scan___d6, 1u);
      backing.DEF_select_ir_scan___d6 = DEF_select_ir_scan___d6;
      vcd_write_val(sim_hdl, num++, DEF_shift_dr__h3465, 1u);
      backing.DEF_shift_dr__h3465 = DEF_shift_dr__h3465;
      vcd_write_val(sim_hdl, num++, DEF_shift_ir__h3372, 1u);
      backing.DEF_shift_ir__h3372 = DEF_shift_ir__h3372;
      vcd_write_val(sim_hdl, num++, DEF_temp___1__h3483, 5u);
      backing.DEF_temp___1__h3483 = DEF_temp___1__h3483;
      vcd_write_val(sim_hdl, num++, DEF_test_logic_reset__h3484, 1u);
      backing.DEF_test_logic_reset__h3484 = DEF_test_logic_reset__h3484;
      vcd_write_val(sim_hdl, num++, DEF_tms__h3231, 1u);
      backing.DEF_tms__h3231 = DEF_tms__h3231;
      vcd_write_val(sim_hdl, num++, DEF_update_dr___d17, 1u);
      backing.DEF_update_dr___d17 = DEF_update_dr___d17;
      vcd_write_val(sim_hdl, num++, DEF_update_ir__h3482, 1u);
      backing.DEF_update_ir__h3482 = DEF_update_ir__h3482;
    }
}

void MOD_mkJtag::vcd_prims(tVCDDumpType dt, MOD_mkJtag &backing)
{
  INST_bypass.dump_VCD(dt, backing.INST_bypass);
  INST_bypass_select.dump_VCD(dt, backing.INST_bypass_select);
  INST_bypass_tdo.dump_VCD(dt, backing.INST_bypass_tdo);
  INST_capture_dr.dump_VCD(dt, backing.INST_capture_dr);
  INST_capture_ir.dump_VCD(dt, backing.INST_capture_ir);
  INST_count.dump_VCD(dt, backing.INST_count);
  INST_debug_op.dump_VCD(dt, backing.INST_debug_op);
  INST_debug_select.dump_VCD(dt, backing.INST_debug_select);
  INST_exit1_dr.dump_VCD(dt, backing.INST_exit1_dr);
  INST_exit1_ir.dump_VCD(dt, backing.INST_exit1_ir);
  INST_exit2_dr.dump_VCD(dt, backing.INST_exit2_dr);
  INST_exit2_ir.dump_VCD(dt, backing.INST_exit2_ir);
  INST_extest_select.dump_VCD(dt, backing.INST_extest_select);
  INST_idcode.dump_VCD(dt, backing.INST_idcode);
  INST_idcode_select.dump_VCD(dt, backing.INST_idcode_select);
  INST_idcode_tdo.dump_VCD(dt, backing.INST_idcode_tdo);
  INST_instr_tdo.dump_VCD(dt, backing.INST_instr_tdo);
  INST_instruction.dump_VCD(dt, backing.INST_instruction);
  INST_instruction2.dump_VCD(dt, backing.INST_instruction2);
  INST_instruction3.dump_VCD(dt, backing.INST_instruction3);
  INST_inverted.dump_VCD(dt, backing.INST_inverted);
  INST_latch_ir.dump_VCD(dt, backing.INST_latch_ir);
  INST_latch_ir_neg.dump_VCD(dt, backing.INST_latch_ir_neg);
  INST_pause_dr.dump_VCD(dt, backing.INST_pause_dr);
  INST_pause_ir.dump_VCD(dt, backing.INST_pause_ir);
  INST_run_test_idle.dump_VCD(dt, backing.INST_run_test_idle);
  INST_sample_preload_select.dump_VCD(dt, backing.INST_sample_preload_select);
  INST_scan_chain_op.dump_VCD(dt, backing.INST_scan_chain_op);
  INST_select_dr_scan.dump_VCD(dt, backing.INST_select_dr_scan);
  INST_select_ir_scan.dump_VCD(dt, backing.INST_select_ir_scan);
  INST_shift_dr.dump_VCD(dt, backing.INST_shift_dr);
  INST_shift_ir.dump_VCD(dt, backing.INST_shift_ir);
  INST_shift_ir_neg.dump_VCD(dt, backing.INST_shift_ir_neg);
  INST_tdi.dump_VCD(dt, backing.INST_tdi);
  INST_tdo.dump_VCD(dt, backing.INST_tdo);
  INST_tdo_enable.dump_VCD(dt, backing.INST_tdo_enable);
  INST_test_logic_reset.dump_VCD(dt, backing.INST_test_logic_reset);
  INST_tms.dump_VCD(dt, backing.INST_tms);
  INST_tms_vec.dump_VCD(dt, backing.INST_tms_vec);
  INST_update_dr.dump_VCD(dt, backing.INST_update_dr);
  INST_update_ir.dump_VCD(dt, backing.INST_update_ir);
}
